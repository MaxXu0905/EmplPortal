$(function() {	"use strict";	(function($, exports) {	/**	 * created by Zhao Xin date: July 25th, 2014	 */	$LAB.script(root + "/plugin/jsviews.min.js")//	.script(root + "/plugin/jquery.isotope.js")//	.script(root + "/plugin/store+json2.min.js")//	.script(root + "/plugin/spin.min.js")//	.script(root + "/plugin/j-ui/jquery-ui-custom.min.js")//	.script(root + "/plugin/bootstrapx-popoverx.js")//	.script(root + "/plugin/Highcharts-3.0.9/js/highcharts.js")//	.script(root + "/plugin/jquery.isotope.js")//	.wait(			function() {				RenderUtils.init();				/** ====常量属性，初始化后不可更改======== */				var META = {					animEndEventName : 'animationend',					init : function() {						this.animEndEventName = this.getAnimateEndEventName() || 'animationend';					},					getAnimateEndEventName : function() {						var el = document.createElement('sets')						var transEndEventNames = {							'WebkitAnimation' : 'webkitAnimationEnd',							'OAnimation' : 'oAnimationEnd',							'msAnimation' : 'MSAnimationEnd',							'animation' : 'animationend'						};						for ( var name in transEndEventNames) {							if (el.style[name] !== undefined) {								return transEndEventNames[name];							}						}					}				};				META.init();												/** === 模型数据 =========================================== */				/** 测评模型:单例 */				var TestData = {					testType : 1, // 社招					seriesId : null,					seriesName : null,					positionName : null, // 测评名称					level : null,					paperId : null,					configInfo:[]				};				/** 试卷列表 */				var Paper = {					papers : [], // 试卷列表					_belongSeriesId : null, // 属于的类别					_belongLevel : null, // 属于的级别					_loading : false, // 正在加载列表					_focusIndex : null, // 正在focus的试卷					_selectedIndex : null, // 选择的试卷					_newPaperId: null // 刚创建的试卷ID				};				/** 信息设置 */				var ConfigInfo = {					mandatories: [], // 必选的					choosedInfos : [], // 选中的					unchoosedInfos : [], // 未选的					_loading : false, // 正在加载列表					_result : true // 是否成功获取列表				};								/** 委托人设置 */				var Authorize = {					_authorize: 0, // 是否开启委托人					_checking: false, // 正在校验委托人邮箱,					_emailValid: false, // 邮箱格式是否正确					alert: null, // 出错提示					trustees: [] // 被委托人列表 				};								/** 模式(创建、编辑) */				var Mode = Klass.create();				Mode.include({					positionId: POSITION_ID,					mode: 0, // 模式：0 创建 1 编辑					editable: true, // 是否可以编辑（当已发过邀请后，相应属性不可编辑）					data: null, // 原始数据					init: function(){ // 初始化方法						if(this.positionId){							document.title = '编辑测评' + project_title;							this.mode = 1;							this.getPostInfo();						}					},					frozen: function(){						return this.mode && !this.editable;					},					getPostInfo: function(){						var that = this;						var success = false;						Server.getPostInfo({							async: false,							beforeSend: function(){								RenderUtils.modalWaiting.showSpin().show('正在加载测评信息...');							},							success: function(data){								if(data.code == 0 && data.data){									success = true;									that.data = data.data;									that.editable = data.data.position.editable?true:false;																		Mode.renderTitle(that);																		// 填充TestData									TestData.positionId = data.data.position.positionId;									TestData.seriesId = data.data.position.seriesId;									TestData.positionName = data.data.position.positionName;									TestData.level = data.data.position.level;									TestData.paperId = data.data.position.paperId;																		// 填充Paper									Paper._belongSeriesId = TestData.seriesId;									Paper._belongLevel = TestData.level;																		// 填充Authorize									Authorize.trustees = data.data.position.employerAuths || [];									if(Authorize.trustees.length){										Authorize._authorize = 1;									}								}							},							complete: function(){								if(success){									RenderUtils.modalWaiting.hide();								}else{									RenderUtils.modalWaiting.title(											'加载测评信息失败了，请<a class="trigger text-highlight">再试一次</a>，或告诉我们：<br/>'													+ RenderUtils.connectInfo).hideSpin().oneEvent(function() {										that.getPostInfo();									});								}							}						}, {							positionId: this.positionId						});					}									});				Mode.extend({					renderTitle: function(mode){						$('#titleMain').html($.templates('#tmpl_titleMain').render(mode));					},					extended: function(){						Mode.helpers();					},					helpers: function(){					}				});				var mode = Mode.inst();				/** === end 模型数据 ======================================= */				/** ====视图帮助补充======== */				RenderUtils.extend({					extended : function() {						RenderUtils.myHelpers();					},					myHelpers : function() {						var that = this;						$.views.helpers({							propFrozen : function() {								return mode.frozen();							},							paperItemVisible: function(index, selectedIndex){								if(mode.frozen() && (index != selectedIndex)){									return false;								}								return true;							}						});					}				});				/** ====end 视图帮助补充======== */							/** 测评步骤第一步 */				var TestStep1 = Controller.create({					records : { // 保存数据对象的对象						series : [],						levels : [],						seriesNames : {},						seriesMapping : {},						levelsMapping : {}					},					attr : { // 流程控制需要的辅助属性						timeoutId4Series : null,						request4GetPapers : null,						nextStepAvailable : false,						firstStep : true // 当前步骤为第一步					// 					},					tmpls : {						'#tmpl_step1_seriesMain' : '$$seriesMain',						'#tmpl_step1_seriesTab' : '$$seriesTab',						'#tmpl_step1_seriesTabContent' : '$$seriesTabContent',						'#tmpl_step1_levelSelect' : '$$testLevel',						'#tmpl_step1_positionName' : '$$positionName',						'#tmpl_step1_paper' : '$$paperMain',						'#tmpl_step_nextMain' : '$$nextMain'					},					elements : {						'dd.series-main' : '$seriesMain',						'.test-level' : '$testLevel',						'.test-levelInput' : '$testLevelInput',						'.position-name' : '$positionName',						'.paper-main' : '$paperMain',						'.next-step' : '$nextMain'					},					lazyElements : {						// 在相应的模板渲染到页面后调用setup方法获取						// 或者在渲染全部模板后调用refreshLazyElements						'$seriesInput' : 'input.test-seriesInput',						'$seriesTab' : 'ul.select-tabs',						'$seriesTabContent' : 'div.select-content',						'$positionNameInput' : '.positionNameInput'					},					events : {						'click,div.select-content>div>span.series,' : 'selectSeries', // 选择职位类别						'blur,input.test-seriesInput,dd.series-main' : 'inputSeries', // 编译职位类别						'click,>li>a.level,.test-level' : 'selectLevel', // 选择职位级别						'click,.btn-paper-create,.paper-main':'createPaper', // 创建试卷						'click,.btn-paper-import,.paper-main':'importPaper', // 导入试卷						'click,.btn-papers-refresh,.paper-main' : 'getPapers', // 刷新试卷列表						'mouseenter,>.paper-item,.paper-main' : 'focusPaper', // hover试卷						'mouseleave,>.paper-item,.paper-main' : 'blurPaper', // hoverout试卷						'click,>.paper-item,.paper-main' : 'selectPaper', // 选择试卷						'click,>.paper-item>.paper-name,.paper-main' : 'seeDetail' // 查看试卷详情					},					init : function() {						this.link();						this.initData();						this.addObservers();					},					getDefaultPositionName : function(seriesId, levelId) {						return (this.records.seriesMapping[seriesId] || TestData.seriesName || '')								+ (this.records.levelsMapping[levelId] || '') + '测评';					},					addObservers : function() {						var that = this;						$.observe(TestData, 'seriesId', function(ev, eventArgs) {							if(!TestData.level){								setTimeout(function(){									that.$testLevelInput.trigger('click');								},100);							}						});						$.observe(TestData, 'seriesId', 'level', function(ev, eventArgs) {							$.observable(TestData).setProperty({								paperId : null,								positionName : that.getDefaultPositionName(TestData.seriesId, TestData.level)							});							$.observable(TestData).setProperty('paperId', null);							/** 决定试卷列表的测评信息发生了变化 */							if (TestData.seriesId != Paper._belongSeriesId									|| TestData.level != Paper._belongLevel) {								if (TestData.seriesId && TestData.level) {									$.observable(Paper).setProperty({										'_belongSeriesId' : TestData.seriesId,										'_belongLevel' : TestData.level,										'_selectedIndex' : null									});									/** 需要重新加载试卷列表 */									that.getPapers();								} else {									$.observable(Paper).setProperty({										'_belongSeriesId' : TestData.seriesId,										'_belongLevel' : TestData.level									});								}							}						});						$.observable(TestData).observeAll(function(ev, eventArgs) {							that.checkNextStepAvailable();						});					},					checkNextStepAvailable : function() {						/** 当基本信息都存在时，激活下一步按钮 */						var available = true;						for ( var prop in TestData) {							if (prop != 'seriesName' && !TestData[prop]) {								available = false;								break;							}						}						$.observable(this.attr).setProperty('nextStepAvailable', available);					},					createPaper: function(){						window.open(root + '/sets/page/createpaper/' + TestData.seriesId + '/' + TestData.level + '/' + encodeURIComponent(encodeURIComponent(TestData.positionName)) + '.html', '_blank');					},					importPaper: function(){						window.open(root + '/sets/page/importPaper/1/' + TestData.seriesId + '/' + TestData.level + '/' + encodeURIComponent(encodeURIComponent(TestData.positionName)) + '/', '_blank');					},					getPapers : function(paperId) {						var pId = paperId || TestData.paperId;						var that = this;						var success = false;						Server.getPapers({							beforeSend : function() {								$.observable(Paper).setProperty('_loading', true);							},							success : function(data) {								if (data.code == 0 && data.data) {									success = true;									$.observable(Paper).setProperty({										'papers' : data.data,										'_loading' : false									});									if(pId){										for ( var i = 0; i < data.data.length; i++) {											var pData = data.data[i];											if(pData.paperId == pId){												$.observable(Paper).setProperty('_selectedIndex', i);												$.observable(TestData).setProperty('paperId', pId);											}										}									}									$.observable(Paper).setProperty('_newPaperId', paperId);								}							},							complete : function() {								if (!success) {									$.observable(Paper).setProperty({										'papers' : [],										'_loading' : false									});								}							}						}, {							seriesId : Paper._belongSeriesId,							level : Paper._belongLevel,							testType: 1						});					},					initData : function() {						var that = this;						var success = false;						Server.getTestBaseInfo({							success : function(data) {								if (data.code == 0) {									success = true;									that.renderSerieSelector(data.data);								}							},							complete : function() {								if(!success){									RenderUtils.modalWaiting.reload('<i class="fa fa-frown-o"></i> 呜呼，获取准备数据失败了');								}							}						});					},					renderSerieSelector : function(data) {						this.records['series'] = data.positionSeries;						this.records['levels'] = data.positionLevels;						/** 1.整理类别名称 2.转换为hash */						var seriesNames = {};						var seriesMapping = {};						for ( var i = 0; i < data.positionSeries.length; i++) {							var series = data.positionSeries[i].children;							if (series && series.length) {								for ( var j = 0; j < series.length; j++) {									var seriesData = series[j];									seriesNames[seriesData.seriesName] = 1;									seriesMapping[seriesData.seriesId] = seriesData.seriesName;								}							}						}						var levelsMapping = {};						for ( var i = 0; i < data.positionLevels.length; i++) {							var levelData = data.positionLevels[i];							levelsMapping[levelData.levelId] = levelData.levelName;						}						this.records['seriesNames'] = seriesNames;						this.records['seriesMapping'] = seriesMapping;						this.records['levelsMapping'] = levelsMapping;						/** 职位类别选择初始数据 */						this.$$seriesTab.link(this.$seriesTab.selector, this.records['series']);						this.$$seriesTabContent.link(this.$seriesTabContent.selector, this.records['series']);						RenderUtils.plugins.selectTabs(this.$seriesTab, this.$seriesTabContent);						/** 填充职位级别初始数据 */						this.$$testLevel.link(this.$testLevel.selector, this.records['levels']);						// edit 						$.observable(TestData).setProperty({							'seriesName' : seriesMapping[TestData.seriesId]						});						this.$testLevelInput.val(levelsMapping[TestData.level]);						if(mode.frozen()){							this.$testLevelInput.attr('disabled', 'disabled');						}						if(mode.mode){							this.getPapers();						}					},					link : function() {						var that = this;						/** 职位类别 */						this.$$seriesMain.link(this.$seriesMain.selector, TestData);						this.setupElements([ '$seriesInput', '$seriesTab', '$seriesTabContent',								'$positionNameInput' ]);						/** 测评名称 */						this.$$positionName.link(this.$positionName.selector, TestData);						/** 试卷选择 */						this.$$paperMain.link(this.$paperMain.selector, Paper);						/** 下一步 */						this.$$nextMain.link(this.$nextMain.selector, this.attr);											},					inputSeries : function(e) {						// 为了忽略用户在选择类别时不可避免的触发该方法的行为，使用延迟执行。						// 当触发selectSeries方法时发送取消执行该方法。						var that = this;						this.attr.timeoutId4Series = setTimeout(function() {							var editSeriesName = $.trim($(e.target).val());							// 判断唯一性							if (editSeriesName && that.records.seriesNames									&& that.records.seriesNames[editSeriesName]) {							} else {								// 用户填写了新的职位类别，删除seriesId								$.observable(TestData).setProperty({									seriesId : null,									paperId : null								});							}						}, 500);					},					selectSeries : function(e) {						clearTimeout(this.attr.timeoutId4Series);						var $ele = $(e.target);						var seriesId = $ele.data('series');						$.observable(TestData).setProperty({							'seriesId' : seriesId,							'seriesName' : null						});						this.$seriesInput.val($.trim($ele.text()));					},					selectLevel : function(e) {						var $ele = $(e.target);						$.observable(TestData).setProperty('level', $ele.data('level'));						this.$testLevelInput.val($ele.text());					},					focusPaper : function(e) {						var index = $(e.target).data('index');						if (isNaN(index)) {							index = $(e.target).closest('paper-item').data('index');						}						$.observable(Paper).setProperty('_focusIndex', index);					},					blurPaper : function(e) {						var index = $(e.target).data('index');						if (isNaN(index)) {							index = $(e.target).closest('.paper-item').data('index');						}						$.observable(Paper).setProperty('_focusIndex', null);					},					selectPaper : function(e) {						var $target = $(e.target);						var index = $(e.target).data('index');						if (isNaN(index)) {							$target = $(e.target).closest('.paper-item');							index = $target.data('index');						}						if (index != Paper._selectedIndex) {							var paperId = $target.data('paperid');							$.observable(Paper).setProperty('_selectedIndex', index);							$.observable(TestData).setProperty('paperId', paperId);						}					},					seeDetail: function(e){						window.open($(e.target).attr('href'));						e.preventDefault();						e.stopPropagation();					}				});				/** 测评步骤第二步 */				var TestStep2 = Controller.create({					records : { // 保存数据对象的对象						infos : [],						trustees: {						} // 用于判重					},					attr : { // 流程控制需要的辅助属性						nextStepAvailable : false, // 下一步按钮是否可用						nextStepContent : mode.mode?'完成编辑':'创建测评', // 下一步按钮显示						finalStep: true, // 当前步骤为最后一步						alert: ''					},					tmpls : {						'#tmpl_step2_configInfo' : '$$configInfo', // 						'#tmpl_step2_authorize' : '$$authorize', // 						'#tmpl_step_nextMain' : '$$nextMain'					},					elements : {						'.config-info-main' : '$configInfo', // 						'.authorize-main' : '$authorize', // 						'.next-step' : '$nextMain'					},					lazyElements : {						'$choosedInfos' : '.choosed-infos', // 已选区域						'$unchoosedInfos' : '.unchoosed-infos', // 备选区域						'$trusteeInput' : '#trustee_email', // 委托人输入框						'$btnAddTrustee' : '.btn-add-trustee' // 委托人输入框					},					lazyEvent : true, // 延迟绑定事件，在关联模板后调用linked方法					events : {						'click,.btn-infos-refresh,' : 'getInfos', // 获取信息标签						/** 以“_”开头的方法使用的上下文为触发对象自身 */						'click,.info-tag-choosed,.config-info-main' : '_unchooseInfo', // 反选						'click,.info-tag-unchoosed,.config-info-main' : '_chooseInfo', // 选择						'click,.check-box.set-authorize,' : 'toggleAuthorize', // toggle委托人						'click,>.btn-final-step,.next-step' : 'createTest', // 创建测评						'keydown,#trustee_email,': 'keyDownTrusteeEmail',						'keyup,#trustee_email,': 'keyTrusteeEmail',						'click,.btn-add-trustee,': 'addTrustee',						'click,a.trustee-remove,.list-trustee' : 'removeTrustee',						'click,a.invite-regist,' : 'inviteRegist'					},					init : function() {						this.link();						this.initData();						this.addObservers();						this.bindEvent();					},					addObservers : function() {						var that = this;					},					bindEvent : function() {						var that = this;						this.$choosedInfos.sortable({							items : '.info-tag-choosed',							placeholder : 'info-placeholder',							distance : 10,							opacity : 0.8,							revert : 100,							update : function(event, ui) {								that.refreshChooseInfo();							}						});						this.$choosedInfos.disableSelection();												$('.authorize-tip').tooltip({							html: true,							placement: 'bottom',							template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div style="width:420px;max-width: 420px;text-align:left;" class="w tooltip-inner"></div></div>',							title: '将测评委托给别人，例如秘书，助理或者其他专做人才服务的机构。<br/>他们可以发送邀请测评，并且对测评报告进行初筛并推荐给你。'						});					},					checkNextStepAvailable : function() {						/** 当成果获取到信息列表时，激活下一步按钮 */						$.observable(this.attr).setProperty('nextStepAvailable', true);					},					initData : function() {						this.getInfos();						if(mode.mode){							for ( var i = 0; i < Authorize.trustees.length; i++) {								this.records.trustees[Authorize.trustees[i].emailGranted] = 1;							}						}					},					dealInfoTag: function(tags){						for ( var i = 0; i < tags.length; i++) {							var infoData = tags[i];							if (infoData.isMandatory) {								$.observable(ConfigInfo.mandatories).insert(infoData);							}else if (infoData.choosed) {								$.observable(ConfigInfo.choosedInfos).insert(infoData);							} else {								$.observable(ConfigInfo.unchoosedInfos).insert(infoData);							}						}					},					getInfos : function() {						if(mode.mode){							this.dealInfoTag(mode.data.positionConfigInfo);							this.checkNextStepAvailable();							return;						}												var that = this;						var success = false;						Server.getInfos({							beforeSend : function() {								$.observable(ConfigInfo).setProperty('_loading', true);							},							success : function(data) {								if (data.code == 0 && data.data) {									success = true;									that.dealInfoTag(data.data);									$.observable(ConfigInfo).setProperty({										'_loading' : false,										'_result' : true,									});								}							},							complete : function() {								if (!success) {									$.observable(ConfigInfo).setProperty({										'_loading' : false,										'_result' : false									});								} else {									that.checkNextStepAvailable();								}							}						});					},					link : function() {						var that = this;						/** 信息配置 */						this.$$configInfo.link(this.$configInfo.selector, ConfigInfo);						this.setupElements([ '$choosedInfos', '$unchoosedInfos' ]);						/** 委托 */						this.$$authorize.link(this.$authorize.selector, Authorize);						this.setupElements([ '$trusteeInput', '$btnAddTrustee' ]);						/** 完成 */						this.$$nextMain.link(this.$nextMain.selector, this.attr);						this.linked();					},					refreshChooseInfo : function() {						var choosedInfos = [];						var configInfo = [];						this.$choosedInfos.find('>.info-tag-choosed').each(function(index) {							var $this = $(this);							var infoId = $this.data('infoid');							choosedInfos.push({								infoId : infoId,								choosed : true,								infoName : $.trim($this.text())							});							configInfo.push({								infoId : infoId							});						});						$.observable(ConfigInfo.choosedInfos).refresh(choosedInfos);						TestData.configInfo = configInfo;					},					_unchooseInfo : function(e) {						var view = $.view(this);						var index = view.index;						var data = view.data;						data.choosed = false;						$.observable(ConfigInfo.choosedInfos).remove(index);						$.observable(ConfigInfo.unchoosedInfos).insert(data);					},					_chooseInfo : function(e) {						var view = $.view(this);						var index = view.index;						var data = view.data;						data.choosed = true;						$.observable(ConfigInfo.unchoosedInfos).remove(index);						$.observable(ConfigInfo.choosedInfos).insert(data);					},					toggleAuthorize: function(){						$.observable(Authorize).setProperty('_authorize', Authorize._authorize ? 0 : 1);					},					keyDownTrusteeEmail: function(e){ // 屏蔽ie8怪异现象						var e = e || event;						var keyNum = e.which || e.keyCode;						if (keyNum == 13) {							return false;						}					},					keyTrusteeEmail: function(e){						var e = e || event;						var keyNum = e.which || e.keyCode;						if (keyNum == 13) {							this.$btnAddTrustee.trigger('click');							e.preventDefault();						    e.stopPropagation();							return false;						}						var email = $.trim(this.$trusteeInput.val());						var valid = false;						if (email && /^[\w\-][\w\-\.]*@[a-z0-9]+([a-z0-9\-\.]*[a-z0-9\-]+)*\.[a-z0-9]{2,}$/ig									.test(email)) {								valid = true;							}						$.observable(Authorize).setProperty({							_emailValid: valid,							alert: null						});					},					addTrustee: function(e){						var email = $.trim(this.$trusteeInput.val());						// 1.判重						if(this.records.trustees.hasOwnProperty(email)){							$.observable(Authorize).setProperty({								alert: '这个人已经委托了'							});							return;						}												// 2.校验						var that = this;						var valid = false;						var alert = null;						Server.checkAuthorEmail({							contentType: 'application/json',							data: JSON.stringify({								emailGranted: email							}),							beforeSend: function(){								$.observable(Authorize).setProperty('_checking', true);							},							success: function(data){								if(data.code == 0 && data.data){									switch (data.data.code) {									case 'SUCCESS':										that.add2TrusteeList(email);										break;									case 'SELFGRANTED':										alert = '哎呀，怎么能委托自己呢';										break;									case 'EMAILNOTSUPPORT':										alert = '不支持此类邮箱';										break;									case 'NONEEXIST':										alert = '这个邮箱还还未注册呢，您可以<a class="invite-regist">邀请</a>他来注册，对方注册后就可以看到您委托的测评啦。';										break;									default:										alert ='校验邮箱出错了';										break;									}								}							},							complete: function(){								$.observable(Authorize).setProperty({									alert: alert,									_checking: false								});							}													});					},					add2TrusteeList: function(email){						this.records.trustees[email] = 1;						this.$trusteeInput.val('').trigger('keyup');						$.observable(Authorize.trustees).insert({							emailGranted: email						});					},					removeTrustee: function(e){						var view = $.view(e.target);						delete this.records.trustees[view.data.emailGranted];						$.observable(Authorize.trustees).remove(view.index);					},					inviteRegist: function(){						var email = $.trim(this.$trusteeInput.val());						if(!email){							return;						}						var alert;						var that = this;						Server.inviteEmployerJoin({							contentType: 'application/json',							data: JSON.stringify({								emailGranted: email							}),							beforeSend: function(){								$.observable(Authorize).setProperty({									alert: '正在发送注册邀请',									_checking: true								});							},							success: function(data){								if(data && data.code == 0){									switch (data.data.code) {									case 'SUCCESS':										alert = '发送邀请邮件成功';										that.add2TrusteeList(email);										break;									case 'ACCTREGISTERED':										alert = '账号已经注册';										break;									case 'EMAILNOTSUPPORT':										alert = '不支持此类邮箱';										break;									case 'SENDMAILERROR':									default:										alert = '发送邀请邮件失败';										break;									}								}							},							complete: function(){								$.observable(Authorize).setProperty({									alert: alert || '发送邀请邮件失败',									_checking: false								});							}						});					},					createTest: function(){						var that = this;						this.refreshChooseInfo();						var success = false;						var desc = mode.mode?'编辑':'创建';						Server.createTest({							data : JSON.stringify({								positionId: TestData.positionId,								testType: TestData.testType,								seriesId: TestData.seriesId,								seriesName: TestData.seriesName,								level: TestData.level,								positionName: TestData.positionName,								paperId: TestData.paperId,								configInfo: TestData.configInfo,								employerAuths: Authorize._authorize?Authorize.trustees:null							}),							contentType : 'application/json',							beforeSend : function() {								RenderUtils.modalWaiting.show('正在'+desc+'测评...');								$.observable(that.attr).setProperty('alert', '');							},							success : function(data) {								if(data.code == 0){									success = true;									TestData.positionId = data.data.positionId;								}							},							error : function() {							},							complete : function() {								if(success){									// 如果是外链链接到本页面，不进行跳转									if(OUT_CALL_TYPE == 'ASMRJOB'){										RenderUtils.modalWaiting.hideSpin().show('测评'+desc+'成功，请关闭页面');										return;									}									var targetUrl;									if(Authorize.trustees.length){										RenderUtils.modalWaiting.show('测评'+desc+'成功，请关闭页面');										targetUrl = root + '/sets/page/reportlist/' + TestData.positionId + '.html';									}else{										RenderUtils.modalWaiting.show('测评'+desc+'成功，现在准备去邀请应聘人');										targetUrl = root + '/sets/page/jumpInvite/' + TestData.positionId + '/';									}									setTimeout(function() {										RenderUtils.modalWaiting.hide();										window.location.replace(targetUrl);									}, 2000);								}else{									RenderUtils.modalWaiting.hide();									$.observable(that.attr).setProperty('alert', '测评'+desc+'失败了，请再试一下，或者告诉测评君<br/>' + RenderUtils.connectInfo);								}							}						});					}				});								/**				 * 步骤管理				 * <p>				 * 1.每个步骤内置“上一步”“下一步”元素，控制是否可用				 * <p>				 * 2.管理器负责步骤元素的事件处理。				 */				var StepManager = Controller.create({					records : {},					attr : {},					getIndex : function(str) {						return /^step(\d)$/.exec(str)[1] * 1;					},					init : function() {						var that = this;						$.each(this.el.find('li[id^=step]'), function() {							var $step = $(this);							that.bindEvents($step);						});					},					bindEvents : function($step) {						var that = this;						var index = this.getIndex($step.attr('id'));						var $preBtn = $step.find('.btn-pre-step');						var $nextBtn = $step.find('.btn-next-step');						if ($preBtn.length) {							var preSelector = $('#step' + (index - 1));							$preBtn.bind('click', function() {								$(preSelector).show();								$step.hide();							});						}						if ($nextBtn.length) {							var nextSelector = $('#step' + (index + 1));							$nextBtn.bind('click', function() {								$(nextSelector).show();								$step.hide();							});						}						if (index == 1) {							$step.show();						}					}				});				exports.PAPERCHOSER = new TestStep1({					el : $("#step1")				});				new TestStep2({					el : $("#step2")				});				new StepManager({					el : $(".step_list")				});//				RenderUtils.plugins.shimPlaceholder();				return;				/** ===导航按钮================================================== */				var hash = window.location.hash.replace('#', '');				if (hash && $('.' + hash).length) {					var point = $('.' + hash).offset().top - 40;					$(window).scrollTop($('.' + hash).offset().top - 40);				};				$('div.step_list .pre, div.step_list .next').click(function(event) {					var target = $(this).data('to'), target_offset = $('.' + target).offset().top;					event.preventDefault();					window.location.hash = target;					$('html, body').stop().animate({						scrollTop : target_offset - 40					}, 600);				});			});	})(jQuery, window);});