(function($, exports) {	$.getProjectName = function() {		var pathName = window.location.pathname;		return pathName.substring(0, pathName.substr(1).indexOf('/') + 1);	};	$.getParameter = function(url, name) {		var params = url.substring(url.indexOf('?') + 1);		params = params.split('&');		if (params && name) {			for ( var i = 0; i < params.length; i++) {				if (params[i].split('=')[0] == name) {					return params[i].split('=')[1];				}			}		}		return '';	};	$.getQueryString = function(name, urlStr) {		var url = urlStr == null ? window.location.search : url;		if (url.indexOf('?') != -1) {			var str = url.substr(1);			strs = str.split("&");			for ( var i = 0; i < strs.length; i++) {				if (strs[i].split('=')[0] == name) {					return decodeURI(strs[i].split('=')[1]);				}			}		}	};	/**	 * 尾部以0补全	 */	$.sets_appendZero = function(n, pos) {		n = '' + n;		if (n.length < pos) {			n = n + '0'.repeat(pos - n.length);		}		return n;	}	/**	 * 	 */	$.sets_prettyTime = function(seconds, def) {		if (isNaN(seconds)) {			return def || (def == 0 ? 0 : '未知');		}		seconds = seconds * 1;		seconds = seconds.toFixed(0);		var hour = parseInt(seconds / 3600);		seconds = seconds - hour * 3600;		var minute = parseInt(seconds / 60);		seconds = seconds - minute * 60;		var result = (hour > 0 ? (hour + '小时') : '') + (minute > 0 ? (minute + '分钟') : '')				+ (seconds > 0 ? (seconds + '秒') : '');		return result == '' ? 0 : result;	};	/**	 * 格式化时间戳	 * <p>	 * precise: 精确度(year, month, day, hour, minute, second)	 */	$.sets_formatTime = function(timeStamp, precise, defaultVal) {		if (!isNaN(timeStamp * 1) && timeStamp * 1 > 0) {			timeStamp = $.sets_appendZero(timeStamp, 13) * 1;			var currT = new Date();			currT.setTime(timeStamp);			var fmt = '';			precise = precise || 'second';			switch (precise) {			case 'second':				fmt = ':' + ((currT.getSeconds() + '').length == 2 ? currT.getSeconds() : ('0' + currT.getSeconds()));			case 'minute':				fmt = ':' + ((currT.getMinutes() + '').length == 2 ? currT.getMinutes() : ('0' + currT.getMinutes()))						+ fmt;			case 'hour':				fmt = ' ' + ((currT.getHours() + '').length == 2 ? currT.getHours() : ('0' + currT.getHours())) + fmt;			case 'day':				fmt = '-' + ((currT.getDate() + '').length == 2 ? currT.getDate() : ('0' + currT.getDate())) + fmt;			case 'month':				fmt = '-'						+ ((currT.getMonth() + 1 + '').length == 2 ? (currT.getMonth() + 1)								: ('0' + (currT.getMonth() + 1))) + fmt;			case 'year':				fmt = currT.getFullYear() + fmt;			}			return fmt;		} else {			return defaultVal || '----------------------------';		}	}	/**	 * 基于jQuery Ajax进行封装	 * 	 * @param opts.url	 *            请求路径	 * @param opts.data	 *            请求数据 JSON对象或字符串	 * @param opts.type	 *            请求方式 GET POST...	 * @param opts.async	 *            请求是否异步，true为异步、false为同步	 * @param opts.contentType	 *            如果为"application/json",那么请求opts.data 为JSON字符串	 * @param opts.beforeSend	 * @param opts.success	 * @param opts.error	 * @param opts.complete	 * @param opts.session	 *            是否需要会话有效,默认为true	 * 	 * 	 */	$.setsAjax = function(opts) {		opts.type = opts.type || 'post';		var headers = {};		if (opts.session != false) {			headers['x-request-type'] = 'ajax';		}		if (opts.async != false) {			opts.async = true;		}		opts.contentType = opts.contentType || 'application/x-www-form-urlencoded';		var isSessionValid = true;		var finalOpts = {			url : opts.url,			data : opts.data,			timeout : 60000,			type : opts.type,			dataType : 'json',			async : opts.async,			contentType : opts.contentType,			headers : headers,			beforeSend : function(XMLHttpRequest) {				if (opts.beforeSend) {					opts.beforeSend(XMLHttpRequest);				}			},			success : function(data, textStatus) {				if (data.code == 13) { // session失效了					isSessionValid = false;					// 弹出登录框					loginWindow({						action : 1					}, finalOpts);				} else {					// 成功返回					if (opts.success) {						opts.success(data, textStatus);					}				}			},			error : function(errors, textStatus) {				if ('timeout' == textStatus) {					// 超时				}				if (opts.error) {					opts.error();				}			},			complete : function(XMLHttpRequest, textStatus) {				if (opts.complete && isSessionValid) {					opts.complete(XMLHttpRequest, textStatus);				}			}		};		if (opts.context) {			finalOpts.context = opts.context;		}		return $.ajax(finalOpts);	};	/**	 * @param action	 *            登录成功后的动作 1:自动消失 2:刷新当前页面 3: 跳转到指定的url(配合actionUrl)	 * @param actionUrl	 *            登录成功后需要跳转的url(当action=3时有效)	 * 	 */	function loginWindow(opts, ajaxOpts) {		var $loginModal = $('#login_modal');		$loginModal.modal({			backdrop : 'static',			keyboard : false		});		var loginPage = root + '/sets/page/login/' + opts.action + '?actionUrl=' + (opts.actionUrl || '') + '';		if (opts.action == 1) {			exports.reAjaxOpts = ajaxOpts;		}		$loginModal.find('.modal-body').load(loginPage, function() {			$loginModal.find('#re-login-main').data('ajaxOpts', ajaxOpts);		});	};	exports.reAjax4reLogin = function(ajaxOpts) {		return $.setsAjax(ajaxOpts);	};	Math.guid = function() {		return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {			var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);			return v.toString(16);		}).toUpperCase();	};	/***************************************************************************	 * 	 * 封装简易类库：begin Freckles	 * 	 **************************************************************************/	if (typeof Object.create !== "function") {		Object.create = function(o) {// 返回一个继承了对象o的新对象			function F() {			}			F.prototype = o;			return new F();		};	}	/**	 * 基本类：使用基于原型的继承，而非new	 *///	var moduleKeywords = [ "included", "extended" ];	var moduleKeywords = {			included: 1,			extended: 1	};	var Klass = {		inherited : function() {		},		created : function() {		},		prototype : {			initializer : function() {			},			init : function() {			}		},		create : function(include, extend) { // 创建类（模型，控制器。。。）			//			var object = Object.create(this);			//			object.parent = this; // 保存上下文到parent属性			//			object.init.apply(object, arguments);			//			return object;			var object = Object.create(this);			object.parent = this;			object.prototype = object.fn = Object.create(this.prototype);			if (include)				object.include(include);			if (extend)				object.extend(extend);			object.created();			this.inherited(object);			return object;		},		init : function() { // 创建实例（模型对象的实例。。。）			//			var instance = Object.create(this.prototype);			//			instance.parent = this;			//			instance.init.apply(instance, arguments);			//			return instance;			var initance = Object.create(this.prototype);			initance.parent = this;			initance.initializer.apply(initance, arguments);			initance.init.apply(initance, arguments);			return initance;		},		proxy : function(func) {			var thisObject = this;			return (function() {				return func.apply(thisObject, arguments);			});		},		include : function(obj) { // 添加实例属性			//			var included = obj.included || obj.setup;			//			for ( var i in obj)			//				this.fn[i] = obj[i];			//			if (included)			//				included(this);			for ( var key in obj)				if (!moduleKeywords[key])					this.fn[key] = obj[key];			var included = obj.included;			if (included)				included.apply(this);			return this;		},		extend : function(obj) { // 添加对象属性			//			var extended = obj.extended || obj.setup;			//			for ( var i in obj)			//				this[i] = obj[i];			//			if (extended)			//				extended(this);			for ( var key in obj)				if (!moduleKeywords[key])//				if (moduleKeywords.indexOf(key) == -1)					this[key] = obj[key];			var extended = obj.extended;			if (extended)				extended.apply(this);			return this;		}	};	//	Klass.fn = Klass.prototype;	//	Klass.fn.proxy = Klass.proxy;	Klass.prototype.proxy = Klass.proxy;	Klass.inst = Klass.init;	var Model = Klass.create();	var PubSub = {		subscribe : function() {			if (!this.o)				this.o = $({});			this.o.bind.apply(this.o, arguments);		},		unsubscribe : function() {			if (this.o)				o.unbind.apply(this.o, arguments);		},		publish : function() {			if (this.o)				this.o.trigger.apply(this.o, arguments);		}	};	Model.extend(PubSub);	var mod = {};	mod.create = function(includes) {		var result = function() {			this.initializer.apply(this, arguments);			this.init.apply(this, arguments);		};		result.fn = result.prototype;		result.fn.init = function() {		};		result.proxy = function(func) {			return $.proxy(func, this);		};		result.fn.proxy = result.proxy;		result.include = function(ob) {			$.extend(this.fn, ob);		};		result.extend = function(ob) {			$.extend(this, ob);		};		result.include({			initializer : function(options) {				this.options = options;				for ( var key in this.options)					this[key] = this.options[key];				if (this.tmpls && $.templates)					this.refreshTemplates();				if (this.elements)					this.refreshElements();				if (this.events && !this.lazyEvent)					this.onEvents();			},			linked : function(opts) {				opts = opts || {};				if (this.events) {					this.onEvents();				}				if(opts.refreshLazyElements){					this.refreshLazyElements();				}			},			$ : function(selector) {				return $(selector, this.el);			},			refreshTemplates : function() { // 模板 Compile template				for ( var key in this.tmpls) {					this[this.tmpls[key]] = $.templates(key);				}			},			refreshElements : function() { // 页面元素				for ( var key in this.elements) {					this[this.elements[key]] = this.$(key);				}			},			refreshLazyElements : function() { // 页面元素				for ( var key in this.lazyElements) {					this[key] = this.$(this.lazyElements[key]);				}			},			setupElements : function(eleKeys, eleWrapper) {				if (this.lazyElements) {					eleWrapper = eleWrapper || this.el;					if (eleKeys && eleKeys.length) {						for ( var i = 0; i < eleKeys.length; i++) {							var eleKey = eleKeys[i];							this[eleKey] = $(this.lazyElements[eleKey], eleWrapper);						}					} else {						this.refreshLazyElements();					}				}			},			eventSplitter : /^(\w+),(.*),(.*)$/,			onEvents : function() {				for ( var key in this.events) {					var handlerName = this.events[key];					var handler;					if (handlerName.indexOf('_') == 0) { // 使用改变的上下文						handler = this[handlerName];					} else {						handler = $.proxy(this[handlerName], this);					}					var match = key.match(this.eventSplitter);					var eventName = match[1];					var selector = match[2];					var hoster = match[3];					var $el = this.el;					if (hoster) {						$el = this.el.find(hoster);					}					if (selector === '') {						$el.bind(eventName, handler);					} else {						$el.on(eventName, selector, handler);					}				}			}		});		if (includes)			result.include(includes);		return result;	};	exports.Klass = Klass;	exports.Model = Model;	exports.Controller = mod;	/***************************************************************************	 * 	 * 封装简易类库：end	 * 	 **************************************************************************/	/***************************************************************************	 * 	 * 本地存储  使用store.js封装本地存储	 * 	 **************************************************************************/	var LocalUtils = Klass.create();	LocalUtils.extend({		prefix : '__101test__',		prefixPublic : 'public__',		prefixPrivate : 'private__',		enabled : false,		_privateId : null,		getPrivateKey : function(key) {			return LocalUtils._privateId ? LocalUtils.prefix + LocalUtils.prefixPrivate + LocalUtils._privateId + '__'					+ key : LocalUtils.getPublicKey(key);		},		getPublicKey : function(key) {			return LocalUtils.prefix + LocalUtils.prefixPublic + key;		},		init : function(privateId, enabledCallback) { // privateId: 私有标识，通常是当前登录用户的id			if (store && store.enabled) {				LocalUtils.enabled = true;				LocalUtils._privateId = privateId;				if (enabledCallback) {					enabledCallback();				}			}		},		setPublic : function(key, value) {			store.set(LocalUtils.getPublicKey(key), value);		},		setPrivate : function(key, value) {			if (LocalUtils._privateId) {				store.set(LocalUtils.getPrivateKey(key), value);			}		},		getPublic : function(key) {			return store.get(LocalUtils.getPublicKey(key));		},		getPrivate : function(key) {			return store.get(LocalUtils.getPrivateKey(key));		},		removePublic : function(key) {			store.remove(LocalUtils.getPublicKey(key));		},		removePrivate : function(key) {			store.remove(LocalUtils.getPrivateKey(key));		},		meta : {			HVCC : 'has-visit-create-campus' // 是否已打开过创建校招微信测评页面		}	});	exports.LocalUtils = LocalUtils;	/***************************************************************************	 * 	 * 视图帮助	 * 	 **************************************************************************/	/** 视图帮助 */	var RenderUtils = Klass.create();	RenderUtils			.extend({				emailReg : /^[\w\-][\w\-\.]*@[a-z0-9]+([a-z0-9\-\.]*[a-z0-9\-]+)*\.[a-z0-9]{2,}$/ig,				weixinService : 'http://www.101test.com/campus/wx/index/{entry}',				connectInfo : 'tel：010-82166778，email：admin@101test.com',				init : function() {					if ($.views) {						RenderUtils.converters();						RenderUtils.helpers();					}					RenderUtils.modalWaiting.init();				},				bindData2Tmpl: function(html, dataHash, data){ // 绑定数据到通过jsrender生成的模板					return $($.parseHTML(html)[1]).data(dataHash, data);				},				modalWaiting : { // 依赖bootstrap的模态窗组件和spin.js					init : function() {						var that = this;						this.$modalHint = $('#modal_waiting');						this.$spinner = this.$modalHint.find('.spinner');						this.$modalHint.modal({							backdrop : 'static',							keyboard : false,							show : false						});						this.spinOpts = {							left : 170						}						this.$modalHint.on('shown.bs.modal', function(e) {							that.$spinner.spin(that.spinOpts);						});						this.$modalHint.on('hide.bs.modal', function(e) {							that.$spinner.spin(false);						});					},					oneEvent : function(handler) {						this.$modalHint.find('.trigger').one('click', handler);						return this;					},					showSpin : function() {						this.$spinner.spin(this.spinOpts);						return this;					},					hideSpin : function() {						this.$spinner.spin(false);						return this;					},					show : function(title) {						this.$modalHint.find('.title').html(title);						this.$modalHint.modal('show');						return this;					},					hide : function(callback) {						if (callback) {							this.$modalHint.one('hidden.bs.modal', function() {								callback();							})						}						this.$modalHint.modal('hide');						return this;					},					title : function(title) {						this.$modalHint.find('.title').html(title);						return this;					},					reload : function(pretext) {						this.$spinner.empty();						this.$modalHint								.find('.title')								.html(										(pretext || '')												+ '，请<a class="text-highlight" onclick="javascript:window.location.reload();">刷新</a>重试');						this.$modalHint.modal('show');						return this;					}				},				flashChecker : function() { // 是否安装了flahsplayer					var hasFlash = false; // 是否安装了flash					if (document.all) {						try {							var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');							if (swf) {								hasFlash = true;							}						} catch (e) {						}					} else {						if (navigator.plugins && navigator.plugins.length > 0) {							var swf = navigator.plugins["Shockwave Flash"];							if (swf) {								hasFlash = true;							}						}					}					return hasFlash;				},				converters : function() {					$.views.converters({						trim : function(val) {							return $.trim(val);						}					});				},				helpers : function() {					// 如果需要使用helpers，需要在自己的js中初始化：RenderUtils.helpers();					$.views.helpers({						count : function(data) { // 返回数组长度							return data.length;						},						prettyTime : function(seconds, def) { // 格式化时间							if (isNaN(seconds)) {								return def || (def == 0 ? 0 : '未知');							}							seconds = seconds * 1;							seconds = seconds.toFixed(0);							var day = parseInt(seconds / 3600 / 24);							seconds = seconds - day * 3600 * 24;							var hour = parseInt(seconds / 3600);							seconds = seconds - hour * 3600;							var minute = parseInt(seconds / 60);							seconds = seconds - minute * 60;							var result = (day>0?(day+'天'):'') + (hour > 0 ? (hour + '小时') : '') + (minute > 0 ? (minute + '分钟') : '')									+ (seconds > 0 ? (seconds + '秒') : '');							return result == '' ? 0 : result;						}					});				},				plugins : {					shimPlaceholder : function(selector) { // // 针对不支持placeholder的浏览器，显示placeholder						if ($.placeholder && $.placeholder.shim) {							if (selector) {								$.placeholder.shim({									selector : selector								});							} else {								$.placeholder.shim();							}						}					},					autoComplete : function(input, content, serverKey, callbacks) { // 网络自动提示控件						var $input = (typeof input == 'string') ? $(input) : input;						var $content = (typeof content == 'string') ? $(content) : content;						var timeoutId = null;						var selectedIndex = -1;						callbacks = callbacks || {};						function selectItem($item) {							var key = $item.data('key');							var value = $.trim($item.text());							if (callbacks.selected) {								callbacks.selected(selectedIndex, {									key : key,									value : value								});							}						}						$content.on('click', '[data-key]', function() {							selectItem($(this));							selectedIndex = -1;						}).on('mouseenter', '[data-key]', function() {							selectedIndex = $.view(this).index;							$content.trigger('selected.item', selectedIndex);						}).on('mouseout', '[data-key]', function() {						});						$content.bind('selected.item', function(e, index) {							$content.find('[data-key]').removeClass('selected');							$content.find('[data-key]:eq(' + index + ')').addClass('selected');						});						$input.on('keyup', function(e) {							if (/(13|38|40)/.test(e.keyCode || e.which)) {								if (e.which == 13) {									e.preventDefault();									if (selectedIndex >= 0) {										var $item = $content.find('[data-key]:eq(' + selectedIndex + ')');										selectItem($item);									}									return;								}								var items = $content.find('[data-key]');								if (e.which == 38) { // 向上									selectedIndex--								}								if (e.which == 40) { // 向下									selectedIndex++								}								if (selectedIndex < 0) {									selectedIndex = 0;								}								if (selectedIndex > items.length - 1) {									selectedIndex = items.length - 1;								}								$content.trigger('selected.item', selectedIndex);							} else {								$content.parent().addClass('open');								var val = $.trim($(this).val());								if (val) {									clearTimeout(timeoutId);									timeoutId = setTimeout(function() {										selectedIndex = -1;										var success = false;										Server[serverKey]({											contentType : 'application/json',											data : JSON.stringify({												infoId : 'GRADUATE_COLLEGE',												searchName : val											}),											beforeSend : function() {												if (callbacks.beforeSend) {													callbacks.beforeSend();												}											},											success : function(data) {												if (callbacks.success) {													if (data.code == 0) {														success = true;														callbacks.success(data);													}												}											},											complete : function() {												if (callbacks.complete) {													callbacks.complete(success);												}											}										})									}, 200); // 延迟执行，防止连续输入触发多次请求，以减少网络开销								}							}						});					},					timePicker : function($trigger, opts) { // 配合bootstrap的下拉框组件创建的时间选择控件						opts = $.extend({							min : 'auto' // 指定初始分钟， 						//							hour: 'auto' // +n, -n						}, opts)						if (!this.timPikerRegisted) {							this.timPikerRegisted = true;							$(document).on('click.bs.dropdown.data-api', '.sets-timepicker', function(e) {								e.stopPropagation()							})						}						var hours = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12',								'13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23' ];						var mins = [ '00', '05', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55' ];						function getTime(val) {							var hour, min;							if (!val) {								var currT = new Date();								if (opts.min != 'auto') {									hour = (currT.getHours() + 1 + '').length == 2 ? (currT.getHours() + 1)											: ('0' + (currT.getHours() + 1));								} else {									hour = (currT.getHours() + '').length == 2 ? currT.getHours() : ('0' + currT											.getHours());								}								min = opts.min != 'auto' ? opts.min : ((currT.getMinutes() + '').length == 2 ? currT										.getMinutes() : ('0' + currT.getMinutes()));								for ( var i = 0; i < mins.length; i++) {									if (min <= mins[i]) {										min = mins[i];										break;									}								}								if (min > 55) {									min = mins[0];									hour = (hour * 1 + 1) + 1;									hour = (hour == 24 ? '00' : hour);								}								val = hour + ':' + min;							} else {								hour = val.split(':')[0];								min = val.split(':')[1];							}							return {								val : val,								hour : hour,								min : min,								hours : hours,								mins : mins							}						}						$								.templates({									timepicker_main : '<p class="item hour">{{:hour}}</p><p class="colon">:</p><p class="item min">{{:min}}</p>',									timepicker_hours : '<span class="hour">{{>#data}}</span>',									timepicker_mins : '<span class="min">{{>#data}}</span>'								});						var TimePicker = function($trigger) {							var $parent = $trigger.parent();							var $content = $trigger.siblings('[data-timepicker="content"]');							if ($content.length == 0) {								return;							}							$trigger.attr('readOnly', 'readOnly');							var time;							$content.on('click', '>p.item', function(e) {								var $this = $(e.target);								if ($this.hasClass('hour')) {									$content.trigger('timepicker.hours', time);								}								if ($this.hasClass('min')) {									$content.trigger('timepicker.mins', time);								}								e.stopPropagation();							}).on('click', 'span.hour', function(e) {								time.hour = $.trim($(e.target).text());								time.val = time.hour + ':' + time.min;								$content.trigger('timepicker.mins', time);								e.stopPropagation();							}).on('click', 'span.min', function(e) {								time.min = $.trim($(e.target).text());								time.val = time.hour + ':' + time.min;								$content.trigger('timepicker.time', time);							});							$content.bind('timepicker.time', function(e, time) {								$content.html($.templates.timepicker_main.render(time));								$trigger.val(time.val);							});							$content.bind('timepicker.hours', function(e, time) {								$content.html($.templates.timepicker_hours.render(time.hours));								$trigger.val(time.val);							});							$content.bind('timepicker.mins', function(e, time) {								$content.html($.templates.timepicker_mins.render(time.mins));								$trigger.val(time.val);							});							$parent.on('hide.bs.dropdown', function() {								$trigger.trigger('timepicker.hide', time);							});							$parent.on('show.bs.dropdown', function() {								time = getTime($trigger.val());								$content.trigger('timepicker.time', time);							});						}						return new TimePicker($trigger);					},					selectTabs : function(tab, content) { // tab控件						var $tab = (typeof tab == 'string') ? $(tab) : tab;						var $content = (typeof content == 'string') ? $(content) : content;						$tab.on('mouseenter', 'li', function() {							var tabName = $(this).data('tab');							$tab.trigger('change.tabs', tabName);						});						$tab.bind('change.tabs', function(e, tabName) {							$tab.children('li').removeClass('active');							$tab.children('[data-tab="' + tabName + '"]').addClass("active");							$content.find('>[data-tab]').removeClass('active');							$content.find('>[data-tab="' + tabName + '"]').addClass('active');						});						var firstName = $tab.find('li:eq(1)').attr('data-tab');						$tab.trigger('change.tabs', firstName);						if ($tab.find('>li').length > 0) {							$tab.find('>li').css({								width : Math.floor($tab.parent().width() / $tab.find('>li').length)							});						}						return this;					}				}			});	exports.RenderUtils = RenderUtils;	/** === 服务接口 =========================================== */	var Server = {		service : function(opts, url) {			if (url) {				opts.url = root + url;			}			return $.setsAjax(opts);		},		getTestBaseInfo : function(opts) { // 获取职位类别树和职位级别列表			return this.service(opts, '/sets/position/initInfo');		},		getPapers : function(opts, urlBindData) { // 根据职位类别以及职位级别获取试卷列表			return this.service(opts, '/sets/position/getPapers/' + urlBindData.seriesId + '/' + urlBindData.level					+ '/' + urlBindData.testType);		},		getInfos : function(opts) { // 获取信息标签列表			return this.service(opts, '/sets/sys/getInfo');		},		getCollegeHintList : function(opts) { // 获取学校提示列表			return this.service(opts, '/sets/info/getBySearchCondition');		},		getCampusSignalList : function(opts) { // 获取学校教室信号强度列表			return this.service(opts, '/sets/position/getCampusSignalList');		},		createTest : function(opts) { // 创建测评			return this.service(opts, '/sets/position/createPosition');		},		createCampus : function(opts) { // 创建校招微信测评			return this.service(opts, '/sets/position/createCampus');		},		getPaperInitInfo : function(opts, urlBindData) { // 获取创建试卷需要的初始化信息（包含 1题库技能信息 2）			return this.service(opts, '/sets/paper/getPaperInitInfo/' + urlBindData.seriesId + '/'					+ urlBindData.levelId);		},		getRecommendQuestion : function(opts, urlBindData) { // 获取推荐题目（3：智力 4：面试）			return this.service(opts, '/sets/position/recommendQuestion/' + urlBindData.type);		},		analysisSkills : function(opts) { // 根据描述分析技能			return this.service(opts, '/sets/paper/analysisSkills');		},		createPaper : function(opts) { // 创建试卷			return this.service(opts, '/sets/paper/createPaper');		},		createCampusPaper : function(opts) { // 创建校招试卷			return this.service(opts, '/sets/paper/createCampusPaper');		},		getQbGroup : function(opts, urlBindData) { // 获取指定面试题组的列表			return this.service(opts, '/sets/qbBase/getQbGroup/' + urlBindData.questionId);		},		getPostInfo : function(opts, urlBindData) { // 获取职位相关信息，用于编辑职位使用			return this.service(opts, '/sets/position/getPosition/' + urlBindData.positionId);		},		queryCampus : function(opts, urlBindData) { // 获取校招职位相关信息，用于编辑职位使用			return this.service(opts, '/sets/position/queryCampus/' + urlBindData.positionId);		},		getCampusPassport : function(opts, urlBindData) { // 查询校招测评passport和entry			return this.service(opts, '/sets/position/getCampusPassport/' + urlBindData.positionId);		},		refreshCampusPassport : function(opts, urlBindData) { // 更换校招passport			return this.service(opts, '/sets/position/refreshCampusPassport/' + urlBindData.positionId);		},		loginCertify : function(opts) { // 登录			return this.service(opts, '/sets/login/certify');		},		loginCertifyMe : function(opts) { // 记住我			return this.service(opts, '/sets/login/certifyme');		},		needValidateCode : function(opts) { // 是否需要校验码			return this.service(opts, '/sets/login/needValidateCode');		},		trialRegist : function(opts) { // 发送免费试用邮件			return this.service(opts, '/sets/trial/registExmpoler');		},		getFastCreatePositionList : function(opts) { // 获取快速定制测评信息			return this.service(opts, '/sets/position/getPositionSeriesCustom');		},		fastCreatePosition : function(opts) { // 快速创建自定义测评			return this.service(opts, '/sets/position/createPositionByCustom');		},		genQRCode : function(opts) { // 生成二维码			return this.service(opts, '/sets/qrcode/genQRCode');		},		getReportTemplateByPaperId : function(opts, urlBindData) { // 根据试卷id获取试卷预览数据			return this.service(opts, '/sets/report/getReportTemplateByPaperId/' + urlBindData.paperId);		},		getSamplePositionInfo: function(opts){ //获取体验测评以及报告数据			return this.service(opts, '/sets/experience/getSamplePositionInfo');		},		checkAuthorEmail: function(opts){ // 校验授权邮箱			return this.service(opts, '/sets/position/checkAuthorEmail');		},		inviteEmployerJoin: function(opts){ // 邀请加入			return this.service(opts, '/sets/position/inviteEmployerJoin');		},		getCompanyInfo: function(opts){ // 查看是否有公司名称			return this.service(opts, '/sets/position/inviteEmployerJoin');		},		invitationMailInfo: function(opts, urlBindData){ // 获取邀请邮件模板			return this.service(opts, '/sets/invitation/mailInfo/' + urlBindData.positionId);		},		invitationMailInfo4Multi: function(opts){ // 获取多个测评邀请邮件模板			return this.service(opts, '/sets/invitation/mailInfoForMulti/');		}	};	exports.Server = Server;})(jQuery, window);