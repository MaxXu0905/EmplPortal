$(function() {	"use strict";	(function($) {		$LAB				.script(root + "/plugin/modernizr.custom.js")				.script(root + "/plugin/jsviews.min.js")				.script(root + "/plugin/flowplayer/flowplayer-3.2.13.min.js")				.script(root + "/plugin/store+json2.min.js")				.script(root + "/plugin/jquery.md5.js")				.wait()				.script(root + "/plugin/flowplayer/flowplayer.controls-3.2.11.min.js")				.wait(						function() {//							/* 记录登陆信息:进入首页 *///							recordloginInfo.postRecord(1, null);							RenderUtils.extend({								extended : function() {									RenderUtils.myHelpers();								},								myHelpers : function() {									$.views.helpers({										isPlenty : function(msg) {											return (msg || '').length > 14;										}									});								}							});							RenderUtils.init();																					var trans = {								animEndEventNames : {									'WebkitAnimation' : 'webkitAnimationEnd',									'OAnimation' : 'oAnimationEnd',									'msAnimation' : 'MSAnimationEnd',									'animation' : 'animationend'								},								init : function() {									this.animEndEventName = this.animEndEventNames[Modernizr.prefixed('animation')];									this.support = Modernizr.cssanimations;									this.endCurrPage = false;									this.endNextPage = false;									this.$login = $('.login-main');									this.$freeTest = $('.free-main');									this.$freeNotify = $('.free-notify');									this.$login.data('originalClassList', this.$login.attr('class'));									this.$freeTest.data('originalClassList', this.$freeTest.attr('class'));									this.$freeNotify.data('originalClassList', this.$freeNotify.attr('class'));																		var hash = window.location.hash.replace('#', '');									var currPage = this.$login;									if(hash){										if(hash == 'regist'){											currPage = this.$freeTest;										}									}									currPage.addClass('pt-page-current');								},								toFreeTest : function() { // login > free									this.nextPage(this.$login, this.$freeTest);								},								toLogin : function() { // free < login									this.nextPage(this.$freeTest, this.$login, true);								},								toFreeNotify : function() { // free > notify									this.nextPage(this.$freeTest, this.$freeNotify);								},								back2FreeTest : function() { // free < notify									this.nextPage(this.$freeNotify, this.$freeTest, true);								},								back2Login : function() { // login < free < notify									this.nextPage(this.$freeNotify, this.$login, true);								},								nextPage : function($currPage, $nextPage, toRight) {									var outClass = 'pt-page-rotateCubeLeftOut pt-page-ontop';									var inClass = 'pt-page-rotateCubeLeftIn';									if (toRight) {										outClass = 'pt-page-rotateCubeRightOut pt-page-ontop';										inClass = 'pt-page-rotateCubeRightIn';									}																		var that = this;									$currPage.addClass(outClass).on(this.animEndEventName, function() {										$currPage.off(that.animEndEventName);										that.endCurrPage = true;										if (that.endNextPage) {											that.onEndAnimation($currPage, $nextPage);										}									});									$nextPage.addClass(inClass + ' pt-page-current').on(this.animEndEventName,											function() {												$nextPage.off(that.animEndEventName);												that.endNextPage = true;												if (that.endCurrPage) {													that.onEndAnimation($currPage, $nextPage);												}											});									if (!this.support) {										this.onEndAnimation($currPage, $nextPage);									}								},								onEndAnimation : function($outpage, $inpage) {									this.endCurrPage = false;									this.endNextPage = false;									this.resetPage($outpage, $inpage);								},								resetPage : function($outpage, $inpage) {									$outpage.attr('class', $outpage.data('originalClassList'));									$inpage.attr('class', $inpage.data('originalClassList') + ' pt-page-current');								}							};							trans.init();							/** 视频 */							var VideoModel = Klass.create();							VideoModel.include({								focus : false,								isPlaying : false							});							var videoData = VideoModel.inst();							/** 登录 */							var LoginModel = Klass.create();							LoginModel.include({								login : false,								employer : {									id : EMPLOYER_ID,									name : EMPLOYER_NAME								},								loginName : null,								loginPswd : null,								remember : false,								ticket : null,								loginNameError : null,								loginPswdError : null,								loginError : null,								loginAvailable : false,								logining : false,								loginSuccess : false,								needcode : false, // 是否需要校验码								validatecodeimg : null,								loginValiCode : null,								init : function() {								}							});							var loginData = LoginModel.inst();							var FreeModel = Klass.create();							FreeModel.include({								freeUser : null,								freeEmail : null,								freeAcctRole : 1,								freeUserError : null,								freeEmailError : null,								freeError : null,								freeing : false,								freeAvailable : false,								init : function() {								}							});							var freeData = FreeModel.inst();							var VideoController = Controller									.create({										lazyElements : {											'$control' : '.hulu',											'$controlbg' : '.hulu-bg'										},										tmpls : {											'#tmpl_videoMain' : '$$videoMain',										},										events : {											'mouseenter,>#video_player,' : 'focusPlayer',											'mouseenter,>.hulu,' : 'focusPlayer',											'mouseleave,>#video_player,' : 'blurPlayer',											'mouseleave,>.hulu,' : 'blurPlayer',											'click,>.hulu>.fullscreen,' : 'fullscreen'										},										init : function() {											this.link();											this.addObservers();											this.setupVideo();										},										lazyEvent : true,										link : function() {											this.$videoMain = this.el;											this.$$videoMain.link(this.$videoMain.selector, videoData);											this.refreshLazyElements();											this.linked(); // 绑定事件										},										addObservers : function() {										},										setupVideo : function() {											var fakeTrigger = 0;											this.player = flowplayer(													"video_player",													root + '/plugin/flowplayer/flowplayer-3.2.18.swf',													{														clip : {															autoPlay : true,															autoBuffering : true,															onStart : function() {																if (fakeTrigger > 0) {																	--fakeTrigger;																	return;																}																$.observable(videoData).setProperty({																	isPlaying : true																});															},															onFinish : function() {																$.observable(videoData).setProperty({																	isPlaying : false																});															},															onPause : function() {																$.observable(videoData).setProperty({																	isPlaying : false																});															},															onResume : function() {																if (fakeTrigger > 0) {																	--fakeTrigger;																	return;																}																$.observable(videoData).setProperty({																	isPlaying : true																});															}														},														playlist : [ {															url : "http://monitortest.oss-cn-hangzhou.aliyuncs.com/employer.mp4",															urlEncoding : false,															autoPlay : false,															autoBuffering : true														} ],														plugins : {															controls : null														}													}).controls("hulu");											this.el.find('a').text('');											//	this.$control.append('<a class="fullscreen"></a>');										},										focusPlayer : function() {											$.observable(videoData).setProperty({												focus : true											});										},										blurPlayer : function() {											$.observable(videoData).setProperty({												focus : false											});										},										fullscreen : function() {											if (this.player) {												try {													this.player.pause();												} catch (e) {												}											}										}									});							var LoginController = Controller.create({								lazyElements : {									'$loginBtn' : '.btn-login'								},								tmpls : {									'#tmpl_loginMain' : '$$loginMain',								},								events : {									'keyup,input[name="loginName"],' : 'keyName',									'keyup,input[name="loginPswd"],' : 'keyPswd',									'keyup,input[name="valiCode"],' : 'keyCode',									'keydown,input.login,' : 'keyLogin',									'click,.remember,' : 'selectRemember', // 记住我									'click,.validatecode-main>img,' : 'changeValidateCode',									'click,.btn-login,' : 'login',									'click,.free-test,' : 'toFreeTest'								},								init : function() {									this.link();									this.addObservers();									this.needValidateCode();									this.initData();								},								lazyEvent : true,								link : function() {									var that = this;									this.$loginMain = this.el;									this.$$loginMain.link(this.$loginMain.selector, loginData);									this.refreshLazyElements();									this.linked(); // 绑定事件									setTimeout(function() {										$.observable(loginData).setProperty({											loginName : that.el.find('input[name="loginName"]').val(),											loginPswd : that.el.find('input[name="loginPswd"]').val()										});									}, 500);								},								initData: function(){									var that = this;																		if (loginData.employer.id) {										loginData.login = true;									}									if (LocalUtils.getPublic('login_remember')) {										$.observable(loginData).setProperty({											remember: true,											loginName : LocalUtils.getPublic('login_loginName'),											loginPswd : LocalUtils.getPublic('login_loginPswd'),											ticket: LocalUtils.getPublic('login_ticket')										});									}									if (loginData.remember && loginData.ticket && loginData.loginName && loginData.loginPswd) {										Server.loginCertifyMe({											data : 'param=' + JSON.stringify({												username : loginData.loginName,												password : loginData.loginPswd,												ticket : loginData.ticket,											}),											success : function(msg) {												if (msg.code == 0) {													if (msg.data.code == 'SUCCESS') {														window.location.href = root + '/sets/page/home';													} else {														that.$loginBtn.trigger('click');													}												}											}										});									}								},								addObservers : function() {									var that = this;									$.observe(loginData, 'loginName', 'loginPswd', 'loginNameError', 'loginValiCode',											function changeHandler(ev, eventArgs) {												var available = false;												if (loginData.loginName && loginData.loginPswd														&& !loginData.loginNameError) {													if (loginData.needcode) {														if (loginData.loginValiCode) {															available = true;														}													} else {														available = true;													}												}												$.observable(loginData).setProperty({													loginAvailable : available												});											});								},								selectRemember : function(e) {									$.observable(loginData).setProperty('remember', loginData.remember ? false : true);								},								keyName : function(e) {									this.keyLogin(e);									var val = $.trim($(e.target).val());									if (val) {										if (/^[\w\-][\w\-\.]*@[a-z0-9]+([a-z0-9\-\.]*[a-z0-9\-]+)*\.[a-z0-9]{2,}$/ig												.test(val)) {											$.observable(loginData).setProperty({												loginName : val,												loginNameError : null,												loginError : null											});										} else {											$.observable(loginData).setProperty({												loginName : val,												loginNameError : 'Email格式不对哦',												loginError : null											});										}									} else {										$.observable(loginData).setProperty({											loginName : val,											loginNameError : '请输入您的公司邮箱',											loginError : null										});									}								},								keyPswd : function(e) {									this.keyLogin(e);									var val = $.trim($(e.target).val());									if (val) {										$.observable(loginData).setProperty({											loginPswd : val,											loginPswdError : null,											loginError : null										});									} else {										$.observable(loginData).setProperty({											loginPswd : val,											loginPswdError : '请输入密码',											loginError : null										});									}								},								keyCode : function(e) {									this.keyLogin(e);									var val = $.trim($(e.target).val());									if (val) {										$.observable(loginData).setProperty({											loginValiCode : val,											loginError : null										});									} else {										$.observable(loginData).setProperty({											loginValiCode : val,											loginError : '请输入验证码'										});									}								},								keyLogin : function(e) {									if (e.keyCode == 13) {										this.$loginBtn.trigger('click');										return false;									}								},								toFreeTest : function(e) {									trans.toFreeTest();								},								needValidateCode : function() {									Server.needValidateCode({										success : function(data) {											if (data.code == 0 && data.data.needCode == 1) {												$.observable(loginData).setProperty(														{															needcode : true,															validatecodeimg : root + '/sets/login/validateCode?'																	+ Math.random()														});											}										}									});								},								changeValidateCode : function() {									$.observable(loginData).setProperty({										validatecodeimg : root + '/sets/login/validateCode?' + Math.random()									});								},								login : function() {									var req = {};									req.username = $.trim(loginData.loginName);									req.password = $.md5(loginData.loginPswd);									if (loginData.needcode) {										req.certifycode = loginData.loginValiCode;									}									Server											.loginCertify({												contentType : 'application/json',												data : JSON.stringify(req),												beforeSend : function() {													$.observable(loginData).setProperty({														logining : true,														loginError : null													});												},												success : function(data) {													if (data.code == 0) {														if (data.data.needCode == 1 && !data.data.code) {															$.observable(loginData).setProperty(																	{																		needcode : true,																		validatecodeimg : root																				+ '/sets/login/validateCode?'																				+ Math.random(),																		loginError : '请输入验证码'																	});															return;														}														if (data.data.code == 'SUCCESS') {															$.observable(loginData).setProperty({																loginSuccess : true															});															if (recordloginInfo) {																try {																	recordloginInfo.postRecord(4, req.username);																} catch (e) {																}															}															// 记住我															if (loginData.remember && data.data.employer.ticket) {																LocalUtils.setPublic('login_remember', true);																LocalUtils.setPublic('login_ticket',																		data.data.employer.ticket);																LocalUtils.setPublic('login_loginName', req.username);																LocalUtils.setPublic('login_loginPswd', req.password);															} else {																LocalUtils.removePublic('login_remember');																LocalUtils.removePublic('login_ticket');																LocalUtils.removePublic('login_loginName');																LocalUtils.removePublic('login_loginPswd');															}															if (LOGIN_REQUEST_URL) {																window.location.href = LOGIN_REQUEST_URL;															} else {																window.location.href = root + '/sets/page/home.html';															}														} else {															var info = '';															switch (data.data.code) {															case 'PASSWORDERROR':																info = '您输入的密码有误';																break;															case 'ACCTNOTEXIST':																info = '您输入的邮箱不存在';																break;															case 'OUTDATE':																info = '您输入的邮箱账户已过期';																break;															case 'CERTIFYCODEERR':																info = '您输入的验证码错误';																break;															default:																info = '网络似乎有点繁忙，请稍后再试';																break;															}															$.observable(loginData).setProperty({																loginError : info															});														}													} else {														$.observable(loginData).setProperty({															loginError : '网络似乎有点繁忙，请稍后再试'														});													}												},												error : function() {													$.observable(loginData).setProperty({														loginError : '网络似乎有点繁忙，请稍后再试'													});												},												complete : function(data) {													$.observable(loginData).setProperty({														logining : false													});												}											});								}							});							var FreeController = Controller.create({								lazyElements : {									'$freeBtn' : '.btn-free'								},								tmpls : {									'#tmpl_freeMain' : '$$freeMain',								},								events : {									'keyup,input[name="freeUser"],' : 'keyUser',									'keyup,input[name="freeEmail"],' : 'keyEmail',									'change,select[name="freeAcctRole"],':'keyAcctRole',									'click,.to-login,' : 'toLogin',									'keydown,input.free,' : 'keyFree',									'click,.btn-free,' : 'free'								},								init : function() {									this.link();									this.addObservers();								},								lazyEvent : true,								link : function() {									this.$freeMain = this.el;									this.$$freeMain.link(this.$freeMain.selector, freeData);									this.refreshLazyElements();									this.linked(); // 绑定事件								},								addObservers : function() {									var that = this;									$											.observe(freeData, 'freeUser', 'freeEmail', 'freeEmailError',													function changeHandler(ev, eventArgs) {														if (freeData.freeUser && freeData.freeEmail																&& !freeData.freeEmailError) {															$.observable(freeData).setProperty('freeAvailable', true);														} else {															$.observable(freeData).setProperty('freeAvailable', false);														}													});								},								keyUser : function(e) {									var val = $.trim($(e.target).val());									if (val) {										$.observable(freeData).setProperty({											freeUser : val,											freeUserError : null,											errorInfo : null										});									} else {										$.observable(freeData).setProperty({											freeUser : val,											freeUserError : '请输入您的姓名',											errorInfo : null										});									}								},								keyEmail : function(e) {									var val = $.trim($(e.target).val());									if (val) {										if (/^[\w\-][\w\-\.]*@[a-z0-9]+([a-z0-9\-\.]*[a-z0-9\-]+)*\.[a-z0-9]{2,}$/ig												.test(val)) {											$.observable(freeData).setProperty({												freeEmail : val,												freeEmailError : null,												errorInfo : null											});										} else {											$.observable(freeData).setProperty({												freeEmail : val,												freeEmailError : 'Email格式不对哦',												errorInfo : null											});										}									} else {										$.observable(freeData).setProperty({											freeEmail : val,											freeEmailError : '请输入您的公司邮箱',											errorInfo : null										});									}								},								keyAcctRole : function(e){									var val = $.trim($(e.target).val());									$.observable(freeData).setProperty({										freeAcctRole : val,									});								},								keyFree : function(e) {									if (e.keyCode == 13) {										this.$freeBtn.trigger('click');										return false;									}								},								toLogin : function(e) {									trans.toLogin();								},								free : function() {									var success = false;									var errorInfo = null;									Server.trialRegist({										contentType : 'application/json',										data : JSON.stringify({											userName : freeData.freeUser,											userEmail : freeData.freeEmail,											acctRole : freeData.freeAcctRole										}),										beforeSend : function() {											$.observable(freeData).setProperty({												freeing : true,												freeError : null											});										},										success : function(data) {											if (data.code == 0) {												if (data.data.code == 'SUCCESS') {													success = true;													trans.toFreeNotify();													try {														recordloginInfo.postRecord(2, freeData.freeEmail);													} catch (e) {													}												} else {													switch (data.data.code) {													case 'EMAILNOTSUPPORT':														errorInfo = '请输入公司内部邮箱，QQ、网易、新浪等公共邮箱目前不能开通测评服务';														break;													case 'ACCTREGISTERED':														errorInfo = '当前邮箱已注册';														break;													case 'SENDMAILERROR':														errorInfo = data.data.message;														break;													}												}											}										},										complete : function() {											if (success) {												errorInfo = null;											} else {												errorInfo = errorInfo || '服务似乎出问题了，请稍后再试';											}											$.observable(freeData).setProperty({												freeing : false,												freeError : errorInfo											});										}									});									return;								}							});							var FreeNotifyController = Controller.create({								lazyElements : {									'$freeBtn' : '.btn-free'								},								tmpls : {									'#tmpl_freeNotify' : '$$notifyMain',								},								events : {									'click,.no-email,' : 'toFree',									'click,.btn-active-email,' : 'activeEmail'								},								init : function() {									this.link();									this.addObservers();								},								lazyEvent : true,								link : function() {									this.$notifyMain = this.el;									this.$$notifyMain.link(this.$notifyMain.selector, freeData);									this.refreshLazyElements();									this.linked(); // 绑定事件								},								addObservers : function() {								},								toFree : function(e) {									trans.back2FreeTest();								},								activeEmail : function() {									window.open('http://mail.' + freeData.freeEmail.split('@')[1]);									$.observable(loginData).setProperty({										loginName : freeData.freeEmail									});									trans.back2Login();								}							});							try {								new VideoController({									el : $(".video-main")								});							} catch (e) {							}							try {								new LoginController({									el : $(".login-main")								});							} catch (e) {							}							try {								new FreeController({									el : $(".free-main")								});							} catch (e) {							}							try {								new FreeNotifyController({									el : $(".free-notify")								});							} catch (e) {							}							$.placeholder.shim();						});	})(jQuery);});