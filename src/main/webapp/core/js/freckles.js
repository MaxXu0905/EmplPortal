(function($, exports) {	/** 基本类 */	var Class = function(parent) { // parent: 添加继承能力，通过一个可选的父类来创建新类		// 用以新建一个新类的函数		var klass = function() {			this.init.apply(this, arguments);		};		if (parent) {			var subClass = function() {			};			subClass.prototype = parent.prototype;			klass.prototype = new subClass;		}		// 实例化方法		klass.prototype.init = function() {		};		// 定义 prototype 的别名		klass.fn = klass.prototype;		// 定义类的别名		klass.fn.parent = klass;		klass._super = klass.__proto__;		// 给类添加属性		klass.extend = function(obj) {			var extended = obj.extended; // 支持回调			for ( var i in obj) {				klass[i] = obj[i];			}			if (extended) {				extended(klass);			}		};		// 给实例添加属性		klass.include = function(obj) {			var included = obj.included;			for ( var i in obj) {				klass.fn[i] = obj[i];			}			if (included) {				included(klass);			}		};		return klass;	};	if (typeof Object.create != 'function') {		Object.create = function(o) { // o：原型 返回继承了对象o的新对象			function F() {			}			F.prototype = o;			return new F();		};	}	var Model = {		inherited : function() {		},		created : function() {		},		prototype : {			init : function() {			}		},		create : function() { // 返回一个新对象，这个对象继承自Model对象，用以创建新模型			console.log('create');			var object = Object.create(this);			object.parent = this;			object.prototype = object.fn = Object.create(this.prototype);			object.created();			this.inherited(object);			return object;		},		init : function() { // 返回一个新对象，它继承自Model.prototype，是Model对象的一个实例			console.log('instance');			var instance = Object.create(this.prototype);			instance.parent = this;			instance.init.apply(instance, arguments);			return instance;		}	};	var mod = {};	mod.create = function(includes) {		var result = function() {			this.initializer.apply(this, arguments);			this.init.apply(this, arguments);		};		result.fn = result.prototype;		result.fn.init = function() {		};		result.proxy = function(func) {			return $.proxy(func, this);		};		result.fn.proxy = result.proxy;		result.include = function(ob) {			$.extend(this.fn, ob);		};		result.extend = function(ob) {			$.extend(this, ob);		};		result.include({			initializer : function(options) {				this.options = options;				for ( var key in this.options)					this[key] = this.options[key];				if (this.events)					this.delegateEvents();				if (this.elements)					this.refreshElements();			},			$ : function(selector) {				return $(selector, this.el);			},			refreshElements : function() {				for ( var key in this.elements) {					this[this.elements[key]] = this.$(key);				}			},			eventSplitter : /^(\w+)\s*(.*)$/,			onEvents : function() {				for ( var key in this.events) {					var handlerName = this.events[key];					var handler = $.proxy(this[handlerName], this);					var match = key.match(this.eventSplitter);					var eventName = match[1];					var selector = match[2];					if (selector === '') {						this.el.bind(eventName, method);					} else {						this.el.on(eventName, selector, handler);					}				}			}		});		if (includes)			result.include(includes);		return result;	};	exports.Class = Class;	exports.Model = Model;	exports.Controller = mod;})(jquery, window);