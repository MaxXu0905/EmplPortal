$(function($) {	"use strict";	(function($) {	$LAB			.wait(					function() {//						var flashChecker = function() {							var hasFlash = false; // 是否安装了flash							if (document.all) {								try {									var swf = new ActiveXObject('ShockwaveFlash.ShockwaveFlash');									if (swf) {										hasFlash = true;									}								} catch (e) {								}							} else {								if (navigator.plugins && navigator.plugins.length > 0) {									var swf = navigator.plugins["Shockwave Flash"];									if (swf) {										hasFlash = true;									}								}							}							return hasFlash;						}						if (!flashChecker()) {							$('#alert_no_flash').show();						}						var vali = {							vali_time : '.vali_time',							vali_time_pattern : /^([1-9][0-9]*)?$/,							init : function() {								var _this = this;								/** 时间校验 */								$(document).on('keyup blur', this.vali_time, function() {									if (!_this.vali_time_pattern.test($(this).val())) {										$(this).val('');									}								});								/** 非空校验 */							},							valiTime : function(val) {								return _this.vali_time_pattern.test($(this).val());							},							showDanger_default : {								placement : 'top',								destroy : false							// distime: 2000							},							showDanger : function($ele, opts) { // 以Bootstrap								// Tooltip形式展现错误								var _this = this;								opts = $.extend(_this.showDanger_default, opts);								var placement = _this.showDanger_default.placement || 'top';								$ele.addClass('vali_error');								$ele.tooltip('show');								$('div.tooltip:last').find('.tooltip-arrow').addClass(										'tooltip-arrow-danger-' + placement);								$('div.tooltip:last').find('.tooltip-inner').addClass('tooltip-inner-danger');								$ele.one('hidden.bs.tooltip', function() {									$ele.removeClass('vali_error');									if (opts.destroy) {										$ele.tooltip('destroy');									} else {										$('div.tooltip').find('.tooltip-arrow').removeClass(												'tooltip-arrow-danger-' + placement);										$('div.tooltip').find('.tooltip-inner').removeClass('tooltip-inner-danger');									}								});								if (opts.distime) {									setTimeout(function() {										$ele.tooltip('destroy');										$ele.removeClass('vali_error');									}, opts.distime);								}							},							locate : function(target) { // 页面滚动到指定class								window.location.hash = target;								var target_offset = $('.' + target).offset().top;								$('html, body').stop().animate({									scrollTop : target_offset - 40								}, 600);							}						};						vali.init();												RenderUtils.extend({							timeFormat2: 'YYYY-MM-DD HH:mm',							extended : function() {								RenderUtils.myConverters();								RenderUtils.myHelpers();							},							myConverters : function() {								$.views.converters('signal', function(val) {									val = Math.abs(val * 1);									if (val < 90) {										return '<span class="text-success">佳</span>';									} else if (val < 100) {										return '<span class="text-info">中</span>';									} else {										return '<span class="text-danger">差</span>';									}								});							},							myHelpers : function() {								var that = this;								$.views.helpers({									dayRelative: function(currentDate, validDate){										var a = moment(currentDate, that.timeFormat2);										var b = moment(validDate, that.timeFormat2);										return b.diff(a, 'days');									},									minRelative: function(beginDateTime, validDateTime){										var a = moment(beginDateTime, that.timeFormat2);										var b = moment(validDateTime, that.timeFormat2);										return b.diff(a, 's');									},									formatAvgTime: function(s){										return Math.ceil(s/60) + '分钟';									}								});							}						});						RenderUtils.init();												var EmailModel = Klass.create();						EmailModel.include({							subject: '', // 邮件名称							content: '', // 邮件正文（含样式）							testPositionName: '', // 招聘职位名称							defaultPositionName: '',							beginDate: null, // 测评开始时间							validDate: null, // 测评结束时间							defaultValidDate: null, // 							totalTime: 0, // 试卷时长							avgTime: 0, // 大于作答时长							canWithOutCamera: 1, // 必须要有摄像头才能考试: 1-是, 0-否							currentDate: null, // 当前时间							hasInterview: 0, // 是否有面试题,							selfContext: '此次测评成绩十分重要，请认真作答。', // 邮件补充							_emailContentLoaded: true, // 邮件信息是否加载成功,							_specifyBeginDate: false,							_relativeTooSmall: false // 间隔过小						});						var emailData = EmailModel.inst();						var EmailController = Controller.create({							attrs: {								timeFormat: 'yyyy-mm-dd hh:ii', // 针对插件datetimepicker的格式化								timeFormat2: 'YYYY-MM-DD HH:mm' // 针对插件moments的格式化							},							records: {							},							lazyElements : {								'$positionName' : '[data-link="testPositionName"]', //								'$beginDate' : '[data-link="beginDate"]', // 日期								'$validDate' : '[data-link="validDate"]'							},							events: {								'click,.select-begindate,':'selectBeginDate', // 指定页面开始时间								'click,.select-camera,':'selectCamera', // 指定页面开始时间								'click,.mail-preview,':'mailPreview' // 邮件预览							},							lazyEvent : true,							tmpls : {								'#tmpl_email' : '$$emailMain',								'#tmpl_email_preview' : '$$emailPreview'							},							init : function() {								this.$previewModal = $('#modal_preview');								this.$previewModal.modal({									show : false								});								this.link();								if(SETS_POSITION_IDS){									this.getEmailData4Multi();								}else{									this.getEmailData();								}								this.addObservers();								this.bindEvent();							},							link : function() {								var that = this;								this.$emailMain = this.el;								this.$$emailMain.link(this.$emailMain.selector, emailData);								this.linked({									refreshLazyElements: true								}); // 绑定事件							},							addObservers: function(){								var that = this;								$.observe(emailData, 'testPositionName', function(ev, eventArgs) {									if(!emailData.testPositionName){										$.observable(emailData).setProperty({											testPositionName : emailData.defaultPositionName										});									}									that.$positionName.focus().blur(); // 去掉<ie9模拟placeholder引起的文字重叠								});							},							bindEvent: function(){ // 绑定自定义事件								var that = this;								this.$beginDate.datetimepicker({							        language:  'zh-CN',							        weekStart: 1,							        todayBtn:  1,									autoclose: 1,									todayHighlight: 1,									startView: 2,									forceParse: 0,							        showMeridian: 1,							        format: that.attrs.timeFormat							    }).on('changeDate', function(ev){							    	if(emailData._specifyBeginDate){							    		var timeInfo = that.getValidDateByBeginDate(that.$beginDate.val(), emailData.totalTime);							    		that.$validDate.val(timeInfo.suggestTime);							    		that.$validDate.datetimepicker('setStartDate', timeInfo.startTime);							    		$.observable(emailData).setProperty({											_relativeTooSmall: false										});							    	}							    	that.updateDatetime();								});								this.$validDate.datetimepicker({									language:  'zh-CN',									weekStart: 1,									todayBtn:  1,									autoclose: 1,									todayHighlight: 1,									startView: 2,									forceParse: 0,									showMeridian: 1,									format: that.attrs.timeFormat								}).on('changeDate', function(ev){									var beginDate = emailData.currentDate;									var validDate = that.$validDate.val();									if(emailData._specifyBeginDate){										beginDate = emailData.beginDate;									}									var a = moment(beginDate, that.timeFormat2);									var b = moment(validDate, that.timeFormat2);									var diff = b.diff(a, 's');									if(diff < emailData.totalTime){										$.observable(emailData).setProperty({											_relativeTooSmall: true										});									}else{										$.observable(emailData).setProperty({											_relativeTooSmall: false										});									}									that.$validDate.val(emailData.validDate);									that.updateDatetime();								});																$('.tooltip-test-time').tooltip({									html: true,									placement: 'bottom',									template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div style="width:420px;max-width: 420px;text-align:left;" class="w tooltip-inner"></div></div>',									title: '测评开始时间是指所有被邀请参加测评的人统一开始作答的时刻。<br/>测评结束时间是指所有被邀请参加测评的人的最后交卷时刻。'								});																this.$previewModal.on('show.bs.modal', function() {									that.$previewModal.find('#company_position').text(emailData.testPositionName || ''); // 									if(emailData._specifyBeginDate){										that.$previewModal.find('#beginDate').show().find('>span').text(emailData.beginDate || ''); // 									}else{										that.$previewModal.find('#beginDate').hide();									}									that.$previewModal.find('#validDate').find('>span').text(emailData.validDate || ''); // 									if(emailData.canWithOutCamera){										that.$previewModal.find('#try_').hide();									}else{										that.$previewModal.find('#try_').show();									}									that.$previewModal.find('#selfContext').text(emailData.selfContext || ''); //								});															},							ceilDatetime: function(datetime){								if(datetime){									var b = moment(datetime, this.timeFormat2);									var tail = (b.minute() + '').split('').pop() * 1;									var add = 0;									if(tail > 5){										add = 10 - tail;									}else if(tail < 5 && tail > 0){										add = 5 - tail									}									if(add > 0){										datetime = b.add('m', add).format(this.attrs.timeFormat2);									}								}								return datetime;							},							updateDatetime: function(){								// 分钟取整								var beginDate = this.ceilDatetime(this.$beginDate.val());								var validDate = this.ceilDatetime(this.$validDate.val());																this.$beginDate.val(beginDate);								this.$validDate.val(validDate);								this.$beginDate.datetimepicker('update');								this.$validDate.datetimepicker('update');								$.observable(emailData).setProperty({									beginDate: beginDate,									validDate: validDate								});							},							getValidDateByBeginDate: function(beginDate, diff){								var m = moment(beginDate, this.attrs.timeFormat2);								return {									suggestTime: m.clone().add('s', diff + 30*60).format(this.attrs.timeFormat2),									startTime: m.clone().add('s', diff + 5*60).format(this.attrs.timeFormat2)								};							},							getEmailData4Multi: function(){								var that = this;								var success = false;								Server.invitationMailInfo4Multi({									contentType : 'application/json',									data : JSON.stringify(//										SETS_POSITION_IDS.split('+')										SETS_POSITION_IDS									),									success: function(data){										if(data.code == 0){											if(data.data){												success = true;												that.handleEmailData(data.data);											}										}									},									complete: function(){										if(!success){											$.observable(emailData).setProperty('_emailContentLoaded', false);										}else{											addCandi.$inviteBtn.removeAttr('disabled');										}									}								});							},							getEmailData: function(){								var that = this;								var success = false;								Server.invitationMailInfo({									success: function(data){										if(data.code == 0){											if(data.data){												success = true;												that.handleEmailData(data.data);											}										}									},									complete: function(){										if(!success){											$.observable(emailData).setProperty('_emailContentLoaded', false);										}else{											addCandi.$inviteBtn.removeAttr('disabled');										}									}								}, {									positionId: SETS_POSITION_ID								});							},							handleEmailData: function(d){								var specifyBeginDate = d.beginDate?true:false;								if(!d.beginDate){									var m = moment(d.currentDate, this.attrs.timeFormat2);									d.beginDate = m.add('d', 1).format(this.attrs.timeFormat2);								}								$.observable(emailData).setProperty({									subject: d.subject,									content: d.content,									testPositionName: d.testPositionName,									defaultPositionName: d.testPositionName,									beginDate: d.beginDate,									validDate: d.validDate,									defaultValidDate: d.validDate,									totalTime: d.totalTime || 3600,									avgTime: d.avgTime,									canWithOutCamera: d.canWithOutCamera == 0 ? 0 : 1,									currentDate: d.currentDate,									hasInterview: d.hasInterview,									_emailContentLoaded: true,									_specifyBeginDate: specifyBeginDate								});								this.updateDatetime();								this.$beginDate.datetimepicker('setStartDate', d.currentDate);								this.$validDate.datetimepicker('setStartDate', d.currentDate);																this.$previewModal.find('.modal-dialog').html(d.content||'');							},							selectBeginDate: function(){								$.observable(emailData).setProperty({									_specifyBeginDate: !emailData._specifyBeginDate								});								if(emailData._specifyBeginDate){									this.$beginDate.trigger('changeDate');								}else{									$.observable(emailData).setProperty({										validDate: emailData.defaultValidDate,									});									this.$validDate.datetimepicker('setStartDate', emailData.currentDate);								}							},							selectCamera: function(){								$.observable(emailData).setProperty({									canWithOutCamera: emailData.canWithOutCamera?0:1								});							},							mailPreview: function(){								this.$previewModal.modal('show');							}						});												var company = {								$wrapper : $('div.mail'),								$companyModal : $('#modal_company'),								companyInfo : {									code : 'SUCCESS',									companyName : ''								},								init : function() {									this.initModal();									this.loadCompanyInfo();									this.check();								},								initModal : function() {									var _this = this;									this.$companyModal.modal({										backdrop : 'static',										keyboard : false,										show : false									});									var $saveBtn = this.$companyModal.find('button.save-company');									var $input = this.$companyModal.find('#company_name');									$input.bind('keyup blur', function() {										var val = $.trim($(this).val());										if (val) {											$saveBtn.removeAttr('disabled');										} else {											$saveBtn.attr('disabled', 'disabled');										}									});									$saveBtn.click(function() {										var val = $.trim($input.val());										if (val) {											_this.saveCompanyName(val, $(this));										}									});								},								check : function() {									var _this = this;									switch (this.companyInfo.code) {									case 'SUCCESS':// 已经有公司信息,可以直接发邀请;										new EmailController({											el: $('#mail')										});										break;									case 'COMPANYFROMDOMAIN':// 通过域名找到了公司信息，需要提示是否更改										_this.$companyModal.find('#company_name').val(_this.companyInfo.companyName || '');									case 'COMPANYNOTFOUND':// 没有找到公司信息，需要手动填写；										_this.$companyModal.modal('show');										_this.$companyModal.find('#company_name').trigger('blur');										break;									}								},								saveCompanyName : function(val, $btn) {									var _this = this;									var success = false;									$.setsAjax({										url : root + '/sets/invitation/saveCompanyInfo',										type : 'post',										contentType : 'application/json',										data : JSON.stringify({											companyName : val										}),										beforeSend : function() {											$btn.text('保存中...').attr('disabled', 'disabled');										},										success : function(data) {											if (data && data.code == 0) {												if (data.data && data.data.code == 'SUCCESS') {													success = true;													_this.$companyModal.modal('hide');													_this.loadMainInfo();												}											}										},										complete : function() {											if (!success) {												$btn.text('保存名称').removeAttr('disabled');											}										}									});								},								loadCompanyInfo : function() {									var _this = this;									$.setsAjax({										url : root + '/sets/invitation/getCompanyInfo',										async : false,										type : 'post',										success : function(data) {											if (data.code == 0 && data.data) {												_this.companyInfo = data.data;											}										}									});								}							};						company.init();												var addCandi = {							$wrapper : $('.add-candi'),							$candAddBtn : $('.add-candi button.add_candi_btn'),							$candNameInput : $('.add-candi input#candi_name'),							$candEmailInput : $('.add-candi input#candi_email'),							$candiList : $('.candi_list'),							$inviteBtn : $('.add-candi>button.submit'),							$multiImport : $('#multi_import'), // 批量导入							$multiImportBtn : null,							$alert : $('.add-candi div.alert-warning'),							alertDefaultTxt : '尚未添加任何应聘人',							listData : [],							importExcelResult : false,							init : function() {								var _this = this;								_this.judgeCandi();								_this.$candiList.on('click', 'li.candi_item button.close', function() {									$(this).parent().parent().parent().remove();									_this.judgeCandi();								});								_this.$candAddBtn.click(function() {									_this.addCandi();								});								this.$candNameInput.keydown(function(e) {									if (e.keyCode == 13) {										if (!_this.$candAddBtn.attr('disabled')) {											_this.addCandi();										}										return false;									}								});								this.$candEmailInput.keydown(function(e) {									if (e.keyCode == 13) {										if (!_this.$candAddBtn.attr('disabled')) {											_this.addCandi();										}										return false;									}								});								_this.$multiImport.attr('disabled', 'disabled');								_this.$multiImport										.uploadify({											'height' : 30,											'width' : 107,											'multi' : false,											'method': 'get',											'swf' : root + '/plugin/uploadify/uploadify.swf',											'cancelImg' : root + '/plugin/uploadify/uploadify-cancel.png',											'uploader' : root + '/sets/importCandidates;jsessionid=' + JESEESION_ID,											'buttonText' : '批量导入',											'auto' : true,											'fileDesc' : '请选择Excel文件',											'fileTypeExts' : '*.xls',											'onUploadStart' : function(file) {												_this.$multiImport.uploadify('settings', 'formData', {'emails' : _this.getEmails()});											},											'onUploadError' : function(file, errorCode, errorMsg, errorString) {											},											'onUploadSuccess' : function(file, data, response) {												data = JSON.parse(data);												if (data) {													_this.importExcelResult = true;													if (data.errors && data.errors.length > 0) { // 有错误														var items = [];														items.push('发现您的Excel有如下问题:<br/><br/>');														for ( var i = 0; i < data.errors.length; i++) {															items.push('<i class="icon-circle"></i> '																	+ data.errors[i].replace(/</g, '&lt;').replace(																			/>/g, '&gt;') + '<br/>');														}															items.push('<br/>继续导入' + data.total + '条中的'		+ data.candidates.length + '条正确数据？');														items																.push('<div class="mt10"><button type="button" class="btn btn-success continue">继续导入</button>');														items																.push('<button type="button" class="ml10 btn btn-default break">停止导入</button></div>');														_this.$alert.html(items.join('')).show();														_this.$alert.find('button.continue').click(function() {															_this.multiImport(data);														});														_this.$alert.find('button.break').click(function() {															_this.judgeCandi();														});													} else {														_this.multiImport(data);													}												} else {													_this.judgeCandi();												}											},											'onUploadComplete' : function() {												$('.uploadify-queue-item').remove();												if (!_this.importExcelResult) {													_this.$alert.text('批量导入失败').removeClass('alert-warning').addClass(															'alert-danger glow-danger').show();;													setTimeout(function() {														_this.$alert.removeClass('alert-danger glow-danger').addClass(																'alert-warning');													}, 2000);												}												_this.importExcelResult = false; // 重置为false											}										});							},							getEmails:function(){								var emails = [];								var list = this.$candiList.children('li.candi_item');								for ( var i = 0; i < list.length; i++) {									var $item = $(list[i]);									emails.push($item.find('.candi_email').text());								}								return emails.join("|");							},							multiImport : function(data) {								var candis = data.candidates || [];								for ( var i = 0; i < candis.length; i++) {									var multiple = false;									var list = this.$candiList.children('li.candi_item');									// TEMP 临时去重									for ( var j = 0; j < list.length; j++) {										var $item = $(list[j]);										if ($item.find('.candi_email').text() == candis[i].email) {											multiple = true;										}									}									if (!multiple) {										this.renderAddCandi(candis[i], true);									}								}								this.judgeCandi();							},							addCandi : function() {								var candi = {};								candi.name = $.trim(this.$candNameInput.val());								candi.email = $.trim(this.$candEmailInput.val());								if (!this.validate(candi)) {									this.renderAddCandi(candi);									this.judgeCandi();									this.$candNameInput.val('');									this.$candEmailInput.val('');									this.$candNameInput.focus();								}							},							validate : function(candi) {								var hasError = false;								if (candi.name == '') {									hasError = true;									this.$candNameInput.tooltip({										container : 'body',										title : '请输入姓名'									});									vali.showDanger(this.$candNameInput, {										distime : 2000,										destroy : true									});									return hasError;								};								if (candi.email == '') {									hasError = true;									this.$candEmailInput.tooltip({										container : 'body',										title : '请输入Email'									});									vali.showDanger(this.$candEmailInput, {										distime : 2000,										destroy : true									});									return hasError;								} else if (!/^[\w\-][\w\-\.]*@[a-z0-9]+([a-z0-9\-\.]*[a-z0-9\-]+)*\.[a-z0-9]{2,}$/ig										.test(candi.email)) {									hasError = true;									this.$candEmailInput.tooltip({										container : 'body',										title : 'Email格式不对哦'									});									vali.showDanger(this.$candEmailInput, {										distime : 2000,										destroy : true									});									return hasError;								}																var _this = this;								// 校验邮箱域名是否合法；同步请求								$.setsAjax({									url : root + '/sets/invitation/checkEmailDomain?email=' + candi.email,									type : 'post',									async : false, //同步校验									success : function(data) {										if (data.code == 0 && data.data) {											if (data.data.code == 'SUCCESS') {												if(data.data.message=='0') // 校验不通过												{													hasError = true;													_this.$candEmailInput.tooltip({														container : 'body',														title : 'Email地址不对哦'													});													vali.showDanger(_this.$candEmailInput, {														distime : 2000,														destroy : true													});												}											}										}									}								});																// ajax不能跳出函数，校验ajax的返回结果								if(hasError)								{									return hasError;								}																var list = this.$candiList.children('li.candi_item');								for ( var i = 0; i < list.length; i++) {									var $item = $(list[i]);									if ($item.find('.candi_email').text() == candi.email) {										hasError = true;										_this.$candEmailInput.tooltip({											container : 'body',											title : 'Email已存在'										});										vali.showDanger(_this.$candEmailInput, {											distime : 2000,											destroy : true										});										return hasError;									}								}							},							renderAddCandi : function(candi, after) {								var items = [];								items.push('<li class="candi_item pending">');								items.push('<ul class="list-inline">');								items.push('<li class="candi_name" title="' + candi.name + '">' + candi.name + '</li>');								items.push('<li class="candi_email" title="' + candi.email + '">' + candi.email										+ '</li>');								items.push('<li class="candi_delete pull-right">');								items.push('<button type="button" class="close" aria-hidden="true">&times;</button>');								items.push('</li></ul></li>');								if (after) {									this.$candiList.append(items.join(''));								} else {									this.$candiList.prepend(items.join(''));								}							},							judgeCandi : function(text) {								var count = this.$candiList.children('li.candi_item').length;								var lastBtnShow = false;								if (count > 0) {									this.$alert.hide();									if (count >= 8) {										lastBtnShow = true;									}								} else {									if (text) {										this.$alert.text(text).show();									} else {										this.$alert.text(this.alertDefaultTxt).show();									}								}								if (lastBtnShow) {									this.$inviteBtn.last().fadeIn();								} else {									this.$inviteBtn.last().fadeOut();								}								return count;							},							hasCandi : function(anim) {								var has = this.$candiList.children('li.candi_item').length > 0;								if (!has && anim) {									var _this = this;									this.$candAddBtn.removeClass('btn-warning').addClass('btn-danger glow-danger');									this.$alert.removeClass('alert-warning').addClass('alert-danger glow-danger');									setTimeout(											function() {												_this.$candAddBtn.removeClass('btn-danger glow-danger').addClass(														'btn-warning');												_this.$alert.removeClass('alert-danger glow-danger').addClass(												'alert-warning');											}, 2000);								}								return has;							},							clearCandList : function() {								this.$candiList.empty();								this.judgeCandi();								this.$inviteBtn.text('发送邀请').removeAttr('disabled');							}						};						addCandi.init();						var ensure_submit = {							$candiList : $('.candi_list'),							$commitModal : $('#commit_result'),							$btn : $('button.submit'),							$info : $('.candi-list-info'),							$filterPane: $('.filter-pane'),							_handlingCount: 0, // 正在处理数							_max_handle_count: MAX_HANDLE_COUNT || 10, // 最大可处理数							handler: null,							handleEmail: function(){//								pending 待发送//								handling 发送中//								fail 发送失败								var _this = this;								clearTimeout(_this.handler);								_this._handlingCount = 0;								_this.runHandler();							},							runHandler: function(){								var _this = this;								var pendingList = _this.$candiList.children('.pending');								if(pendingList.length){									$.each(pendingList, function(index){										if(_this._handlingCount < _this._max_handle_count){											_this._handlingCount ++;											_this.sendEmail($(this));										}else{											return false;										}									});									setTimeout(function(){										_this.runHandler();									}, INTERVAL*1000 || 2000);								}else{									clearTimeout(_this.handler);								}							},							init : function() {								var _this = this;								// 添加事件								this.$btn.click(function() {									if (addCandi.hasCandi(true)) {										_this.disableBtns();										var totalCount = addCandi.$candiList.children('li.candi_item').length || 0;										_this.refreshInfo(totalCount);										_this.handleEmail();									}								});								addCandi.$candiList.on('click', 'a.candi_resend_btn', function(e) {									var $btn = $(e.target);									var $ele = $btn.closest('li.candi_item');									$ele.find('p.candi_error').remove();									if ($ele.data('testId')) {										_this.resendEmail($ele);									} else {										_this.sendEmail($ele);									}								});								addCandi.$candiList.on('click', '.candi_delete', function(e) {									var $btn = $(e.target);									if (!addCandi.hasCandi()) {										_this.sendDone();									}								});																this.$filterPane.on('click', 'label', function(e){																		switch($(this).data('filter')){									case 'all':										_this.$candiList.children().show();										break;									case 'handling':										_this.$candiList.children().hide();										_this.$candiList.children('.handling').show();										break;									case 'pending':										_this.$candiList.children().hide();										_this.$candiList.children('.pending').show();										break;									default:										_this.$candiList.children().hide();										_this.$candiList.children('.fail').show();										break;									}								});							},							refreshInfo: function(totalCount){								var failCount = addCandi.$candiList.children('.fail').length || 0;								var leftCount = addCandi.$candiList.children('li.candi_item').length || 0;																if(totalCount){									this.$info.find('.total-count').text(totalCount);								}else{									totalCount = (this.$info.find('.total-count').text() || 0) * 1;								}								var handleCount = totalCount - (leftCount - failCount);								this.$info.find('.handle-count').text(handleCount);								this.$info.find('.fail-count').text(failCount);								if(leftCount){									this.$info.show();								}else{									this.$info.hide();								}							},							disableBtns : function() {								addCandi.$multiImport.uploadify('disable', true);								addCandi.$candAddBtn.attr('disabled', 'disabled');								this.$btn.text('邀请中...').attr('disabled', 'disabled');							},							enableBtns : function() {								addCandi.$multiImport.uploadify('disable', false);								addCandi.$candAddBtn.removeAttr('disabled');								this.$btn.html('<span class="glyphicon glyphicon-envelope"></span> 发送邀请 ').removeAttr(										'disabled');							},							beforeEmailSend : function($ele) {								$ele.attr('class', 'candi_item handling');								$ele.find('li.candi_delete').hide();								$ele.children('ul').append(										'<li class="candi_sending"><i class="fa fa-spinner fa-spin"></i></li>');							},							completeEmailSend : function($ele, success, errorMsg) {								--this._handlingCount;								if(this._handlingCount<0){									this._handlingCount = 0;								}								if (!success) {									$ele.attr('class', 'candi_item fail')									$ele.find('li.candi_sending').remove();									$ele.find('li.candi_delete').show();									var items = [];									items.push('<p class="text-danger candi_error">');									items.push(errorMsg || '邀请失败')									items.push('<a class="pull-right candi_resend_btn">重试</a></p>');									$ele.children('ul').append($(items.join('')));								} else if (!addCandi.hasCandi()) {									this.sendDone();								}							},							resendEmail : function($ele) {								var _this = this;								var success = false;								var errorMsg;								var needCamera = 0;								if($('#camera').is(":checked"))									{									   needCamera = 1;									}								var reqData = {										positionId : SETS_POSITION_ID,										candidateName : $ele.find('.candi_name').text(),										candidateEmail : $ele.find('.candi_email').text(),										beginDate :　emailData._specifyBeginDate?emailData.beginDate:'',										validDate :　emailData.validDate,										testPositionName : emailData.testPositionName,										canWithOutCamera : emailData.canWithOutCamera,										selfContext: emailData.selfContext || ''									};								$.setsAjax({									url : root + '/sets/invitation/reInvite/' + $ele.data('testId'),									type : 'post',									contentType:'application/json',									data :　JSON.stringify(reqData),									beforeSend : function() {										_this.beforeEmailSend($ele);									},									success : function(data) {										if (data.code == 0 && data.data) {											if (data.data.code == 'SUCCESS') {												success = true;												$ele.remove();											} else {												errorMsg = data.data.message;											}										}									},									complete : function() {										_this.completeEmailSend($ele, success, errorMsg);										_this.refreshInfo();									}								});							},							sendEmail : function($ele) {								var _this = this;								var needCamera = 0;								if($('#camera').is(":checked"))									{									   needCamera = 1;									}								var reqData,url;								var success = false;								var errorMsg;																if(SETS_POSITION_IDS){																		url = root + '/sets/invitation/commitForMulti/';									reqData = {//											multiPositionIds : SETS_POSITION_IDS.split('+'),											multiPositionIds : SETS_POSITION_IDS,											candidateName : $ele.find('.candi_name').text(),											candidateEmail : $ele.find('.candi_email').text(),											beginDate :　emailData._specifyBeginDate?emailData.beginDate:'',											validDate :　emailData.validDate,											testPositionName : emailData.testPositionName,											canWithOutCamera : emailData.canWithOutCamera,											selfContext: emailData.selfContext || ''									};								}else{									url = root + '/sets/invitation/commit/';									reqData = {											positionId : SETS_POSITION_ID,											candidateName : $ele.find('.candi_name').text(),											candidateEmail : $ele.find('.candi_email').text(),											beginDate :　emailData._specifyBeginDate?emailData.beginDate:'',											validDate :　emailData.validDate,											testPositionName : emailData.testPositionName,											canWithOutCamera : emailData.canWithOutCamera,											selfContext: emailData.selfContext || ''									};								}																								$.setsAjax({									url : url,									type : 'post',									contentType : 'application/json',									data : JSON.stringify(reqData),									beforeSend : function() {										_this.beforeEmailSend($ele);									},									success : function(data) {										if (data.code == 0 && data.data) {											if (data.data.code == 'SUCCESS') {												success = true;												$ele.remove();											} else {												if(!SETS_POSITION_IDS){													$ele.data('testId', data.data.testId);												}												errorMsg = data.data.message;											}										}									},									complete : function() {										_this.completeEmailSend($ele, success, errorMsg);										_this.refreshInfo();									}								});							},							sendDone : function() {								this.enableBtns();								addCandi.judgeCandi('');								this.$info.hide();								var qrCode = [];								$										.setsAjax({											url : root + '/sets/sys/getQRCodePicUrl',											success : function(data) {												if (data.data) {													qrCode.push('<div class="codetext">');													qrCode.push('<img id="qrcode-pic" class="invite-qrcode-pic" src="');													qrCode.push(data.data);													qrCode.push('">');													qrCode.push('<div class="slogan">微信扫一扫<br>测评报告早知道</div>');													qrCode.push('</div>');												}											},											complete : function() {												var items = [];												items.push('您已处理了全部的邮件');												items														.push('<button type="button" class="ml20 btn btn-success to-list">去查看测评详情</button>');												items.push(qrCode.join(''));												addCandi.$alert.html(items.join('')).show();												addCandi.$alert.find('button.to-list').click(														function() {															window.location.replace(root + '/sets/page/reportlist/'																	+ SETS_POSITION_ID + '.html#list_invited');														});											}										});							},							showResultModal : function() {								this.$commitModal.modal();							}						};						ensure_submit.init();											});	})(jQuery);				(function($) {		/**		 * 防止session失效		 */		function heartBeat(){			$.setsAjax({				url : root + '/sets/invitation/preventSessionValid/',				type : 'post'			});		}				setInterval(function(){			heartBeat();		}, 1000 * 60);			})(jQuery);							});