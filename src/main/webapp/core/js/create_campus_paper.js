$(function() {"use strict";(function($) {	"use strict";	/**	 * created by Zhao Xin on July 2ed, 2014	 * email: zhaoxin7@asiainfo.com	 */	$LAB			.script(root + "/plugin/jsviews.min.js")			//			.script(root + "/plugin/posfixed.js")			//			.script(root + "/plugin/jquery.isotope.js")			//			.script(root + "/plugin/store+json2.min.js")			//			.script(root + "/plugin/spin.min.js")			//			.script(root + "/plugin/j-ui/jquery-ui-custom.min.js")			//			.script(root + "/plugin/bootstrapx-popoverx.js")			//			.script(root + "/plugin/Highcharts-3.0.9/js/highcharts.js")			//			.wait(					function() {						/** === 模型数据 =========================================== */						/** 校招测评模型 */						var PaperModel = Klass.create();						PaperModel.include({							_baseInfo : null, // 初始信息，页面加载时获取							_skillLib : {}, // 技能哈希，用于快速索引							/**技能部分***********************************/							_skill : 1, // 是否考察技能							/***** 选择题相关 *****/							_choice : 1, // 是否添加选择题							_skillQuery : null, // 搜索框内容							_skillQueryInputFocus : false,							_ghostInput : null, // 测评描述内容							_ghostInputFocus : false,							_skillLoading : false, // 正在分析技能描述							_libs : [], // 题库							_libSelectedIndex : -1, // 选中的题库序列							_skills : [], // 选中题库对应的技能列表							_chosenSkills : [], // 选中的技能							_chosenSkillSets : {}, // 选中的技能集合（保存技能的id，用于快速判断）							_skillTotalTime : 0, // 选择题总时间							_skillTotalCount : 0, // 选择题总数							/***** 问答题相关 ******/							_qa : 0, // 是否添加问答题							_qaUseSelf : 1, // 是否使用自有题库							_customQas : [], // 添加的自定义问答题							/**智力部分***********************************/							_eq : 0, // 是否添加智力							_eqUse101 : 1, // 是否使用百一推荐							_eqUseSelf : 1, // 是否使用自有题库							_customEqs : [], // 添加的自定义智力题							_eqLoading : false, // 推荐中							_eqRecommend : null, // 推荐的智力题							/**汇总********************/							_paperTotalTime : 0,							_paperTotalCount : 0,							questionIds : [ ], // 选择的题目id							paper : {								paperName : POSITION_NAME + '试卷', // 试卷名称								seriesId : 99, // 固定值								level : 1, // 固定值								degreeToSkills : []							}						});						PaperModel.extend({							convert2ReqData : function(o) {								var data = {};								data.paper = {									paperName : o.paper.paperName,									seriesId : o.paper.seriesId,									level : o.paper.level,									degreeToSkills : []								};								data.questionIds = [];								if (o._skill) {									if (o._choice) {										var degreeToSkills = [];										var degreeInfos = o._baseInfo.degreeInfos;										for ( var i = 0; i < o._chosenSkills.length; i++) {											var chosenSkill = o._chosenSkills[i];											// 根据技能类型（来自百一 或 来自自有题库）做不同处理											if (chosenSkill.libType == 1) { // 百一题库												var d = degreeToSkills[chosenSkill.selectedDegreeIndex];												if (!d) {													d = {														labelDegree : degreeInfos[chosenSkill.selectedDegreeIndex],														skills : []													};													degreeToSkills[chosenSkill.selectedDegreeIndex] = d;												}												d.skills.push({													skillId : chosenSkill.skillId,													skillName : chosenSkill.skillName,													questionNum : chosenSkill.selectedSubNum												});											} else { // 自有题库												var ids = chosenSkill.questionIds || [];												for ( var j = 0; j < ids.length; j++) {													data.questionIds.push(ids[j]);												}											}										}										var d = [];										for ( var i = 0; i < degreeToSkills.length; i++) {											if (degreeToSkills[i]) {												d.push(degreeToSkills[i]);											}										}										data.paper.degreeToSkills = d;									}																		if (o._qa && o._qaUseSelf && o._customQas.length) {										for ( var i = 0; i < o._customQas.length; i++) {											data.questionIds.push(o._customQas[i].questionId);										}									}								}																if (o._eq) {									if (o._eqUse101 && o._eqRecommend) {										data.questionIds.push(o._eqRecommend.questionId);									}									if (o._eqUseSelf && o._customEqs.length) {										for ( var i = 0; i < o._customEqs.length; i++) {											data.questionIds.push(o._customEqs[i].questionId);										}									}								}																return data;							},							getDegreeIndexById : function(paperData, id) {								var degreeInfos = paperData._baseInfo.degreeInfos || [];								for ( var i = 0; i < degreeInfos.length; i++) {									var degreeInfo = degreeInfos[i];									if (degreeInfo.degreeId == id) {										return i;									}								}								return 0;							},							addUp : function(o) {								var totalPaperCount = 0;								var totalPaperTime = 0;								if (o._skill) {									if (o._choice) {										totalPaperCount += o._skillTotalCount;										totalPaperTime += o._skillTotalTime;									}									if (o._qa && o._qaUseSelf && o._customQas.length) {										totalPaperCount += o._customQas.length;										for ( var i = 0; i < o._customQas.length; i++) {											totalPaperTime += (o._customQas[i].suggestTime || 0);										}									}								}																if (o._eq) {									if (o._eqUse101 && o._eqRecommend) {										totalPaperCount += 1										totalPaperTime += o._eqRecommend.time;									}									if (o._eqUseSelf && o._customEqs.length) {										totalPaperCount += o._customEqs.length;										for ( var i = 0; i < o._customEqs.length; i++) {											totalPaperTime += (o._customEqs[i].suggestTime || 0);										}									}								}								return {									time : totalPaperTime,									count : totalPaperCount								}							}						});						var paperData = PaperModel.inst();						/** === end 模型数据 ======================================= */						var META = {							selfWindow : 'window.self.question.select', // 打开自主选题窗口的名字							animEndEventName : null,							animSupport : false,							init : function() {								this.animEndEventName = this.getAnimateEndEventName();								if (this.animEndEventName) {									this.animSupport = true;								}							},							getAnimateEndEventName : function() {								var el = document.createElement('sets')								var transEndEventNames = {									'WebkitAnimation' : 'webkitAnimationEnd',									'OAnimation' : 'oAnimationEnd',									'msAnimation' : 'MSAnimationEnd',									'animation' : 'animationend'								};								for ( var name in transEndEventNames) {									if (el.style[name] !== undefined) {										return transEndEventNames[name];									}								}								return false;							}						};						META.init();						/** ====视图帮助======== */						RenderUtils.extend({							extended : function() {								RenderUtils.myConverters();								RenderUtils.myHelpers();							},							myConverters : function() {								$.views.converters('signal', function(val) {									val = Math.abs(val * 1);									if (val < 90) {										return '<span class="text-success">佳</span>';									} else if (val < 100) {										return '<span class="text-info">中</span>';									} else {										return '<span class="text-danger">差</span>';									}								});							},							myHelpers : function() {								var that = this;								$.views.helpers({									hasSelected : function(skillId) { // 技能是否已经选择										for ( var id in paperData._chosenSkillSets) {											if (skillId == id) {												return true;											}										}										return false;									},									getSubjectNums : function(least, most) {										var subRange = [];										for ( var int = least; int <= most; int++) {											subRange.push({												num : int											});										}										return subRange;									},									iTotalTime : function(iData) { // 推荐的面试题组总时间										return RenderUtils.getITotalTime(iData);									},									ciTotalTime : function(ciData) {										return RenderUtils.getCITotalTime(ciData);									}								});							},							getITotalTime : function(iData) { // 推荐的面试题组总时间								var q = iData.qbQuestion || [];								var totalTime = 0;								for ( var i = 0; i < q.length; i++) {									totalTime += q[i].suggestTime;								}								return totalTime;							},							getCITotalTime : function(ciData) { // 自选的面试题组总时间								var q = ciData.rows || [];								var totalTime = 0;								for ( var i = 0; i < q.length; i++) {									totalTime += (q[i].suggestMinutes * 60);								}								return totalTime;							},							$modalQuestionList: $('#modal_questionSelect'),							popupSelfQuestionList : function(searchCondition, callback) {								var that = this;								window.selectInfo = {									selectSearchCondition: searchCondition, // 查询条件									handler: function(data){										callback(JSON.parse(data || '{}')); // 回调函数										that.$modalQuestionList.modal('hide');									}								}								this.$modalQuestionList.find('.modal-dialog').load(root + '/sets/page/questionSelect?ts=' + Math.random());								this.$modalQuestionList.modal('show');							}						});						RenderUtils.init();						/** ====end 视图帮助======== */						var BaseController = Controller.create({							records : { // 保存数据对象的对象							},							attr : { // 流程控制需要的辅助属性							// 							},							tmpls : {								'#tmpl_baseInfo' : '$$baseInfo'							},							elements : {},							lazyElements : {},							events : {},							init : function() {								this.link();								this.initData();								this.addObservers();							},							addObservers : function() {							},							getPapers : function() {								var that = this;								var success = false;							},							initData : function() {								var that = this;								var success = false;								Server.getPaperInitInfo({									async : false,									beforeSend : function() {										RenderUtils.modalWaiting.show('加载页面初始化信息...');									},									success : function(data) {										if (data.code == 0) {											success = true;											paperData._baseInfo = data.data;											paperData._libs = data.data.qbBaseInfos;											delete data.data.qbBaseInfos;											// 根据_libs建立快速查找对象											for ( var i = 0; i < paperData._libs.length; i++) {												var lib = paperData._libs[i];												var skills = lib.skills || [];												for ( var j = 0; j < skills.length; j++) {													var skill = skills[j];													paperData._skillLib[skill.skillId] = skill;												}											}											paperData._techSelectedNum = paperData._baseInfo.leastSubjectNum || 0;										}									},									complete : function() {										if (!success) {											RenderUtils.modalWaiting													.reload('<i class="fa fa-frown-o"></i> 呜呼，加载页面初始化信息失败了');										} else {											RenderUtils.modalWaiting.hide();										}									}								}, {									seriesId : paperData.paper.seriesId,									levelId : paperData.paper.level								});							},							link : function() {								var that = this;								/** 试卷选择 */								this.$baseInfo = this.el;								this.$$baseInfo.link(this.$baseInfo.selector, paperData);							}						});						var SkillController = Controller								.create({									records : { // 保存数据对象的对象									},									attr : { // 流程控制需要的辅助属性										libSelectedIndex : null,										libType : null,										lastSelectedDegreeIndex : 1, // 最后选择的级别，作为下一次选中技能的默认级别									// 题库类别，对应prebuilt 1：百一 2：自建									},									tmpls : {										'#tmpl_skillMain' : '$$skillMain'									},									elements : {},									lazyElements : {										'$skillSetting' : '>.skill_setting',										'$choiceSetting' : '>.step-body>.choice_setting',										'$techSetting' : '>.step-body>.tech_setting',										'$qaSetting' : '>.step-body>.qa_setting',										'$chosenWrapper' : '>.wapper-main>.chosen-wrapper',										'$ghostAlert' : '>.wapper-main>.chosen-wrapper>.ghost-main>.ghost-alert',										'$chosenList' : '>.wapper-main>.chosen-wrapper>.chosen-list'									},									lazyEvent : true, // 延迟绑定事件，在关联模板后调用linked方法									events : {										'click,>.step-header>.test_skill,' : 'toggleSkill',										'click,>.step-body>.test_choice,' : 'toggleChoice',										'click,>.step-body>.test_tech,' : 'toggleTech',										'click,>.step-body>.test_qa,' : 'toggleQA',										/** 选择题 */										'focus,>.step-body>.choice_setting .skillQueryInput,' : 'focusSkillQuery',										'blur,>.step-body>.choice_setting .skillQueryInput,' : 'blurSkillQuery',										//				'click,>.step-body .ghost-handle,' : 'toggleGhost', // 展开，收起ghost										'click,>.item,.lib-list' : 'selectLib', // 选中题库										'click,>.item:not(.skill-item-selected),.skill-wrapper' : 'selectSkill', // 选中技能										'mouseenter,>.chosen-item,.chosen-list' : 'focusSkill', // hover技能										'mouseleave,>.chosen-item,.chosen-list' : 'blurSkill', // hoverout技能										'focus,>.ghostInput,.ghost-main' : 'focusGhost', // hover技能										'blur,>.ghostInput,.ghost-main' : 'blurGhost', // hoverout技能										'keyup,>.ghostInput,.ghost-main' : 'keyGhost', // 填写描述										'click,>.btn-ghost-commit,.ghost-main' : 'getSkillsByGhost', // 分析技能										'click,>.chosen-item>.skill-remove,.chosen-list' : 'removeSkill', // 移除选中技能										'click,>.chosen-item .tiny-select:not(.tiny-select-active),.chosen-list' : 'popupTinySelect', // 弹出选择框										'mouseleave,>.chosen-item .tiny-select,.chosen-list' : 'blurTinySelect', // 恢复选择框										'click,>.chosen-item .tiny-select-active.select-degree>span,.chosen-list' : 'selectDegree', // 选择技能级别										'click,>.chosen-item .tiny-select-active.select-subjectnum>span,.chosen-list' : 'selectSubjectNum', // 选择技能题目数量										/** 问答题 */										'click,>.part-self>.part-content>.popup,.qa_setting' : 'popupQaList', // 从自有题库添加问答题										'click,>.part-self>.part-toggle,.qa_setting' : 'toggleQaSelf' // 不使用自有题库									},									init : function() {										this.link();										this.addObservers();										this.bindEvents();										this.initData();									},									bindEvents : function() {										$('[data-toggle="tooltip"]').tooltip({											html: true,											placement: 'bottom',											template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div style="width:420px;max-width: 420px;text-align:left;" class="w tooltip-inner"></div></div>',											title: '了解：对一些事情明白；<br/>'+												'熟悉：了解得很清楚，清楚的知道；<br/>'+												'掌握：熟知并能运用；<br/>'+												'精通：透彻理解并能熟练掌握。<br/><br/>'+												'针对百一的每一道题，测评君都会根据Glicko算法精心计算难度（答错人数占答题人数比例越高，题目越难）。当您会选择百一技能时，我们将会根据您所选择的级别以及掌握程度计算题目难度。<br/>'+												'例如JAVA<span class="alizarin">中级</span>开发工程师：<span class="orange">精通</span>JAVA。我们就会出<span class="alizarin">中级</span>中<span class="orange">最难的</span>题目。'										});									},									addObservers : function() {										/** 技能选项和技能选中项的题目数发生了变化，触发题目发生变化 */										$.observe(paperData._chosenSkills, function(ev, eventArgs) {											var sTotalTime = 0;											var sTotalCount = 0;											var avgTime = paperData._baseInfo.objectAvgTime || 0;											for ( var u = 0; u < paperData._chosenSkills.length; u++) {												var skillData = paperData._chosenSkills[u];												var num = skillData.selectedSubNum												sTotalCount += num;												if (skillData.libType) {													sTotalTime += num * avgTime;												} else {													sTotalTime += skillData.time;												}											}											$.observable(paperData).setProperty({												_skillTotalTime : sTotalTime,												_skillTotalCount : sTotalCount											});										});									},									getPapers : function() {										var that = this;										var success = false;									},									initData : function() {										this.chooseSkills(paperData._baseInfo.initDegreeSkills || []);									},									chooseSkills: function(skillGroups){ // 根据技能描述选中选择题标签										for ( var i = 0; i < skillGroups.length; i++) {											var skillGroup = skillGroups[i];											var refInfo = skillGroup.labelDegree;											var selectedDegreeIndex = -1;											for ( var j = 0; j < skillGroup.skills.length; j++) {												// 根据当前skillId从缓存中找到对应的对象												// contains skillId , skillName & degreeToQuestionNum												var skillData = paperData._skillLib[skillGroup.skills[j].skillId];												if (!skillData) {													continue;												}												skillData.libType = 1;												if (selectedDegreeIndex == -1) {													for ( var k = 0; k < skillData.degreeToQuestionNum.length; k++) {														if (skillData.degreeToQuestionNum[k].degreeId == refInfo.degreeId) {															selectedDegreeIndex = k;															break;														}													}												}												skillData.selectedDegreeIndex = selectedDegreeIndex;												if(skillData.degreeToQuestionNum[selectedDegreeIndex]){													skillData.selectedSubNum = skillData.degreeToQuestionNum[selectedDegreeIndex].questionLeast;												}																								// 将id保存到_chosenSkillSets，以便快速判断是否已选中												paperData._chosenSkillSets[skillData.skillId] = 1;												// 刷新题目范围												$.observable(paperData._chosenSkills).insert(														skillData);												$.observable(paperData._skills).refresh(														paperData._skills);											}										}									},									link : function() {										var that = this;										/** 试卷选择 */										this.$skillMain = this.el;										this.$$skillMain.link(this.$skillMain.selector, paperData);										this.setupElements([ '$skillSetting', '$choiceSetting', '$techSetting',												'$qaSetting' ]);										this.setupElements([ '$chosenWrapper', '$chosenList', '$ghostAlert' ],												this.$choiceSetting);										this.linked(); // 绑定事件									},									toggleSkill : function(e) {										$.observable(paperData).setProperty('_skill', paperData._skill ? 0 : 1);									},									toggleChoice : function(e) {										$.observable(paperData).setProperty('_choice', paperData._choice ? 0 : 1);									},									toggleTech : function(e) {										$.observable(paperData).setProperty('_tech', paperData._tech ? 0 : 1);									},									toggleQA : function(e) {										$.observable(paperData).setProperty('_qa', paperData._qa ? 0 : 1);									},									focusSkillQuery : function(e) {										$.observable(paperData).setProperty('_skillQueryInputFocus', true);									},									blurSkillQuery : function(e) {										$.observable(paperData).setProperty('_skillQueryInputFocus', false);									},									focusGhost : function(e) {										$.observable(paperData).setProperty('_ghostInputFocus', true);									},									blurGhost : function(e) {										$.observable(paperData).setProperty('_ghostInputFocus', false);									},									keyGhost : function(e) {										var val = $(e.target).val();										$.observable(paperData).setProperty({											_ghostInput : val										});										this.$ghostAlert.removeClass('ghost-alert-show');									},									getSkillsByGhost : function(e) {										var that = this;										var success = false;										Server												.analysisSkills({													data : JSON.stringify({														seriesId : paperData.paper.seriesId,														skillDesc : paperData._ghostInput													}),													contentType : 'application/json',													beforeSend : function() {														$.observable(paperData).setProperty('_skillLoading', true);														that.$chosenWrapper.spin({															lines : 12,															length : 8,															width : 4,															radius : 9,															corners : 1,															zIndex : 1000														}, '#000');													},													success : function(data) {														if (data.code == 0 && data.data.length) {															success = true;															var skillGroups = data.data;															for ( var i = 0; i < skillGroups.length; i++) {																var skillGroup = skillGroups[i];																var refInfo = skillGroup.labelDegree;																var selectedDegreeIndex = -1;																for ( var j = 0; j < skillGroup.skills.length; j++) {																	// 根据当前skillId从缓存中找到对应的对象																	// contains skillId , skillName & degreeToQuestionNum																	var skillData = paperData._skillLib[skillGroup.skills[j].skillId];																	if (!skillData) {																		continue;																	}																	skillData.libType = 1;																	if (selectedDegreeIndex == -1) {																		for ( var k = 0; k < skillData.degreeToQuestionNum.length; k++) {																			if (skillData.degreeToQuestionNum[k].degreeId == refInfo.degreeId) {																				selectedDegreeIndex = k;																			}																		}																	}																	skillData.selectedDegreeIndex = selectedDegreeIndex;																	skillData.selectedSubNum = skillData.degreeToQuestionNum[selectedDegreeIndex].questionLeast;																	// 将id保存到_chosenSkillSets，以便快速判断是否已选中																	paperData._chosenSkillSets[skillData.skillId] = 1;																	// 刷新题目范围																	$.observable(paperData._chosenSkills).insert(																			skillData);																	$.observable(paperData._skills).refresh(																			paperData._skills);																}															}														}													},													complete : function() {														that.$chosenWrapper.spin(false);														$.observable(paperData).setProperty('_skillLoading', false);														if (!success) {															that.$ghostAlert.addClass('ghost-alert-show');														}													}												});									},									selectLib : function(e) {										var view = $.view(e.target);										var selectedIndex = view.index;										this.attr.libType = view.data.prebuilt;										$.observable(paperData).setProperty({											_libSelectedIndex : selectedIndex,											_skills : paperData._libs[selectedIndex].skills										});									},									selectSkill : function(e) {										var $target = $(e.target).closest('.skill-item');										// 根据技能是来自百一题库还是自建题库决定动作										if (this.attr.libType) { // 来自百一											/**											 * 选中技能模型											 * skillData: { // 百一模型											 *  1 degreeToQuestionNum: [{ // 该技能所能选择的级别列表											 *  	degreeId:1,											 *  	degreeName:'精通',											 *  	questionLeast: 7, // 该级别的题目选择区间											 *  	questionMost: 15											 *  }],											 *  2 libType: 1, // 区别内置题库和自建题库											 *  3 selectedDegreeIndex: 0, // 选择的级别在级别列表的索引											 *  4 selectedSubNum: 7, // 选择的题目数											 *  5 skillId: 技能id											 *  6 skillName: 技能名称											 *  7 qbId: 所属的题库id											 * }											 */											$target.addClass('skill-item-selected');											var skillData = $.view($target[0]).data;											skillData.libType = this.attr.libType;											skillData.selectedDegreeIndex = 0;											// 刷新题目范围											skillData.selectedSubNum = skillData.degreeToQuestionNum[0].questionLeast;											$.observable(paperData._chosenSkills).insert(skillData);											// 同时将id保存到_chosenSkillSets，以便快速判断是否已选中											paperData._chosenSkillSets[skillData.skillId] = 1;										} else { // 来自自建											/**											 * 选中技能模型											 * skillData: { // 百一模型											 *  1 qbId: 11111, // 所属的题库id											 *  2 libType: 0, // 区别内置题库和自建题库											 *  4 selectedSubNum: 7, // 选择的题目数											 *  5 time: 100, // 总时间（秒）											 *  5 skillId: 技能id											 *  6 skillName: 技能名称											 *  7 questionIds: []											 * }											 */											var skillData = $.view($target[0]).data; // contains (qbId, skillId, skillName)											skillData.libType = this.attr.libType;											// 根据题库id和技能id打开自有题库页面去选择试题											var datas = RenderUtils.popupSelfQuestionList({												qbId : skillData.qbId,												category : 1,												searchCondition : {													choice : true,													skillId : skillData.skillId												}											}, function(datas){												if (datas && datas.length) { // 如果选择了试题													$target.addClass('skill-item-selected');													skillData.time = 0;													skillData.questionIds = [];													skillData.selectedSubNum = datas.length;													for ( var i = 0; i < datas.length; i++) {														var data = datas[i];														skillData.time += data.suggestTime;														skillData.questionIds.push(data.questionId);													}													$.observable(paperData._chosenSkills).insert(skillData);													// 同时将id保存到_chosenSkillSets，以便快速判断是否已选中													paperData._chosenSkillSets[skillData.skillId] = 1;												}											});										}										this.$chosenList.stop().animate({											scrollTop : 44 * paperData._chosenSkills.length										}, 500);									},									removeSkill : function(e) {										var $target = $(e.target).closest('.chosen-item');										var view = $.view($target.get(0));										// 1 先删除_chosenSkillSets的哈西，再remove，否则view.data将获取不到										delete paperData._chosenSkillSets[view.data.skillId];										// 2 remove										$.observable(paperData._chosenSkills).remove(view.index);										// 3 刷新skills										$.observable(paperData._skills).refresh(paperData._skills);									},									blurSkill : function(e) {										var $target = $(e.target).closest('.chosen-item');										$target.removeClass('chosen-item-selected');									},									focusSkill : function(e) {										var $target = $(e.target).closest('.chosen-item');										$target.addClass('chosen-item-selected');									},									popupTinySelect : function(e) {										var $target = $(e.target).closest('.tiny-select');										$target.addClass('tiny-select-active');										$target.siblings('.tiny-select').hide();									},									blurTinySelect : function(e) {										var $target = $(e.target).closest('.tiny-select');										$target.removeClass('tiny-select-active');										$target.siblings('.tiny-select').show();									},									selectDegree : function(e) {										this.blurTinySelect(e);										var $degree = $(e.target);										var $belongSkill = $degree.closest('.chosen-item');										var belongSkillView = $.view($belongSkill.get(0));										var selectedIndex = $.view(e.target).index;										// 下面的代码改变了数组的某一项的内容，但是不会监听到数组的改变，										// $.observable(paperData._chosenSkills[belongSkillView.index]).setProperty({										// 	selectedDegreeIndex : selectedIndex,										// 	selectedSubNum : belongSkillView.data.degreeToQuestionNum.questionLeast										// });										var degree2QuestionNum = belongSkillView.data.degreeToQuestionNum[selectedIndex];										if (belongSkillView.data.selectedSubNum > degree2QuestionNum.questionMost												|| belongSkillView.data.selectedSubNum < degree2QuestionNum.questionLeast) {											var selectedNum = belongSkillView.data.degreeToQuestionNum[selectedIndex].questionLeast;											paperData._chosenSkills[belongSkillView.index].selectedSubNum = selectedNum;										}										paperData._chosenSkills[belongSkillView.index].selectedDegreeIndex = selectedIndex;										$.observable(paperData._chosenSkills).refresh(paperData._chosenSkills); // 这样写可以监听到数组的改变										return false;									},									selectSubjectNum : function(e) {										var $num = $(e.target);										var $belongSkill = $num.closest('.chosen-item');										var belongSkillView = $.view($belongSkill.get(0));										var selectedNum = $.view(e.target).data.num;										paperData._chosenSkills[belongSkillView.index].selectedSubNum = selectedNum;										$.observable(paperData._chosenSkills).refresh(paperData._chosenSkills);										this.blurTinySelect(e);										return false;									},									focusTech : function(e) {										var $target = $(e.target).closest('.part-101');										$target.addClass('part-101-active');									},									blurTech : function(e) {										var $target = $(e.target).closest('.part-101');										$target.removeClass('part-101-active');									},									selectTechNum : function(e) {										var $num = $(e.target);										var selectedNum = $.view(e.target).data.num;										$.observable(paperData).setProperty({											_techSelectedNum : selectedNum										});										this.blurTinySelect(e);										return false;									},									toggleTech101 : function(e) {										$.observable(paperData).setProperty('_techUse101',												paperData._techUse101 ? 0 : 1);									},									toggleTechSelf : function(e) {										$.observable(paperData).setProperty('_techUseSelf',												paperData._techUseSelf ? 0 : 1);									},									popupTechList : function(e) {										RenderUtils.popupSelfQuestionList({											category : 1,											searchCondition : {												program : true											}										}, function(techList){											if (techList && techList.length) {												$.observable(paperData).setProperty('_customTechs', techList);											}										});									},									toggleQaSelf : function(e) {										$.observable(paperData).setProperty('_qaUseSelf', paperData._qaUseSelf ? 0 : 1);									},									popupQaList : function(e) {										RenderUtils.popupSelfQuestionList({											category : 1,											searchCondition : {												essay : true											}										}, function(qaList){											if (qaList && qaList.length) {												$.observable(paperData).setProperty('_customQas', qaList);											}										});									}								});												var EqController = Controller.create({							records : { // 保存数据对象的对象							},							attr : { // 流程控制需要的辅助属性							},							tmpls : {								'#tmpl_eqMain' : '$$eqMain'							},							elements : {},							lazyElements : {								'$eqSetting' : '>.eq_setting'							},							lazyEvent : true, // 延迟绑定事件，在关联模板后调用linked方法							events : {								'click,>.step-header>.test_eq,' : 'toggleEq',								/** 编程题 */								'mouseenter,>.part-101,.eq_setting' : 'focusEq', // hover								'mouseleave,>.part-101,.eq_setting' : 'blurEq', // hoverout								'click,>.part-101>.part-toggle,.eq_setting' : 'toggleEq101', // 不使用百一推荐								'click,>.part-self>.part-toggle,.eq_setting' : 'toggleEqSelf', // 不使用自有题库								'click,>.part-101>.part-content>.change,.eq_setting' : 'getRecommed', // 推荐智力题								'click,>.part-self>.part-content>.popup,.eq_setting' : 'popupEqList' // 从自有题库添加智力题							},							init : function() {								this.link();								this.initData();							},							getPapers : function() {								var that = this;								var success = false;							},							initData : function() {								this.getRecommed();							},							getRecommed : function() {								Server.getRecommendQuestion({									data : '{}',									contentType : 'application/json',									beforeSend : function() {										$.observable(paperData).setProperty('_eqLoading', true);									},									success : function(data) {										if (data.code == 0) {											$.observable(paperData).setProperty('_eqRecommend', data.data);										}									},									complete : function() {										$.observable(paperData).setProperty('_eqLoading', false);									}								}, {									type : 3								});							},							link : function() {								var that = this;								this.$eqMain = this.el;								this.$$eqMain.link(this.$eqMain.selector, paperData);								this.setupElements([ '$eqSetting' ]);								this.linked(); // 绑定事件							},							toggleEq : function(e) {								$.observable(paperData).setProperty('_eq', paperData._eq ? 0 : 1);							},							focusEq : function(e) {								var $target = $(e.target).closest('.part-101');								$target.addClass('part-101-active');							},							blurEq : function(e) {								var $target = $(e.target).closest('.part-101');								$target.removeClass('part-101-active');							},							toggleEq101 : function(e) {								$.observable(paperData).setProperty('_eqUse101', paperData._eqUse101 ? 0 : 1);							},							toggleEqSelf : function(e) {								$.observable(paperData).setProperty('_eqUseSelf', paperData._eqUseSelf ? 0 : 1);							},							popupEqList : function(e) {								RenderUtils.popupSelfQuestionList({									category : 3,									searchCondition : {//										essay : true,										choice : true									}								}, function(eqList){									if (eqList && eqList.length) {										$.observable(paperData).setProperty('_customEqs', eqList);									}								});							}						});						var CreateController = Controller.create({							$backDrop : $('body>.create-main-backdrop'),							records : { // 保存数据对象的对象							},							attr : { // 流程控制需要的辅助属性							},							tmpls : {								'#tmpl_createMain' : '$$createMain'							},							elements : {							},							lazyElements : {},							events : {								'mouseenter,,' : 'focusPane',								'mouseleave,,' : 'blurPane',								'click,.btn-create-paper,' : 'createPaper' // 创建试卷							},							init : function() {								this.link();								this.initData();								this.addObservers();							},							addObservers : function() {								var that = this;								// 监控会影响总时间和总题数的属性								$.observe(paperData, '_skill', // [技能]								'_choice', '_skillTotalTime', '_skillTotalCount', // 选择题								'_tech', '_techUse101', '_techUseSelf', '_techSelectedNum', '_customTechs', // 编程题								'_qa', '_qaUseSelf', '_customQas', //  问答题								'_eq', '_eqUse101', '_eqUseSelf', '_customEqs', '_eqRecommend', // [智力题]								'_interview', '_interviewUseType', '_customInterview', '_interviewRecommend', // [面试题]								function changeHandler(ev, eventArgs) {									var statistic = PaperModel.addUp(paperData);									$.observable(paperData).setProperty({										_paperTotalCount : statistic.count,										_paperTotalTime : statistic.time									});								});							},							initData : function() {							},							link : function() {								var that = this;								this.$createMain = this.el;								this.$$createMain.link(this.$createMain.selector, paperData);							},							focusPane : function() {								this.$backDrop.addClass('backdrop-focus');							},							blurPane : function() {								this.$backDrop.removeClass('backdrop-focus');							},							createPaper : function() {								var data = PaperModel.convert2ReqData(paperData);								var success = false;								var paperId = null;								var that = this;								Server.createCampusPaper({									data : JSON.stringify(data),									contentType : 'application/json',									beforeSend : function() {										RenderUtils.modalWaiting.showSpin().show('正在创建试卷');									},									success : function(data) {										if (data.code == 0 && data.data.code == 'SUCCESS') {											success = true;											paperId = data.data.paperId;										}									},									complete : function() {										if (success) {											RenderUtils.modalWaiting.show('<i class="fa fa-smile-o"></i> 创建试卷成功');											if(window.opener){												if(window.opener.PAPERCHOSER){													window.opener.PAPERCHOSER.getPapers(paperId);												}												setTimeout(function(){													if(window.opener){														window.close();													}												}, 2000);											}										} else {											RenderUtils.modalWaiting.show(													'创建试卷失败了，请<a class="trigger text-highlight">再试一次</a>，或告诉我们：<br/>'															+ RenderUtils.connectInfo).hideSpin().oneEvent(function() {												that.createPaper();											});										}									}								});							}						});						new BaseController({							el : $("#baseInfo")						});						new SkillController({							el : $("#skillMain")						});						new EqController({							el : $("#eqMain")						});						new CreateController({							el : $("#createMain")						});						return;						/** ===导航按钮================================================== */						var hash = window.location.hash.replace('#', '');						if (hash && $('.' + hash).length) {							var point = $('.' + hash).offset().top - 40;							$(window).scrollTop($('.' + hash).offset().top - 40);						};						$('div.step_list .pre, div.step_list .next').click(function(event) {							var target = $(this).data('to'), target_offset = $('.' + target).offset().top;							event.preventDefault();							window.location.hash = target;							$('html, body').stop().animate({								scrollTop : target_offset - 40							}, 600);						});					});})(jQuery);});